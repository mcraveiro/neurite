#+title: Sprint Backlog 06
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission

- Integrate VTK with CGAL
- Provide a realistic visualisation of SWC files.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2016-01-27 Wed 17:52]
| <75>                                                                        |         |       |      |
| Headline                                                                    | Time    |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                                | *27:07* |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| Stories                                                                     | 27:07   |       |      |
| Active                                                                      |         | 27:07 |      |
| STARTED Sprint and product backlog grooming                                 |         |       | 0:59 |
| STARTED Journal club and other activities                                   |         |       | 2:25 |
| COMPLETED Setup access to bio-computation irc channel                       |         |       | 0:25 |
| COMPLETED Design a simple project structure for use cases                   |         |       | 2:32 |
| COMPLETED Rename =swc::file= to =swc::model=                                |         |       | 0:07 |
| COMPLETED Create the =geometry.swc= project                                 |         |       | 2:38 |
| COMPLETED Refactor code to fit the new project structure                    |         |       | 2:07 |
| COMPLETED Understand the fundamentals of placing objects in space           |         |       | 6:39 |
| COMPLETED Get a basic understanding of required maths terminology           |         |       | 3:01 |
| COMPLETED Add support for CGAL                                              |         |       | 0:58 |
| STARTED Render a realistic SWC file                                         |         |       | 1:18 |
| STARTED Create a processor in =geometry.swc= to organise the points         |         |       | 3:58 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2016-01-25 Mon 21:28]--[2016-01-25 Mon 21:33] =>  0:05
    CLOCK: [2016-01-20 Wed 16:59]--[2016-01-20 Wed 17:09] =>  0:10
    CLOCK: [2016-01-19 Tue 17:33]--[2016-01-19 Tue 17:55] =>  0:17
    CLOCK: [2016-01-18 Mon 13:50]--[2016-01-18 Mon 14:12] =>  0:22

Updates to sprint and product backlog.

*** STARTED Journal club and other activities                         :story:
    CLOCK: [2016-01-22 Fri 16:01]--[2016-01-22 Fri 18:01] =>  2:00
    CLOCK: [2016-01-18 Mon 16:03]--[2016-01-18 Mon 16:14] =>  0:11
    CLOCK: [2016-01-18 Mon 14:41]--[2016-01-18 Mon 14:55] =>  0:14

Time spent in generic tasks.

- sorting out supervision.

*** Chat with btn                                                     :story:

Any time spent with updates.

*** COMPLETED Setup access to bio-computation irc channel             :story:
    CLOSED: [2016-01-19 Tue 15:11]
    CLOCK: [2016-01-19 Tue 14:46]--[2016-01-19 Tue 15:11] =>  0:25

Biocomputation has a gitter IRC channel. We should join it using
emacs.

Notes:

- [[http://www.emacswiki.org/emacs/ErcSSL][ERC with SSL support]]
- [[http://emacs.stackexchange.com/questions/3846/how-can-i-use-erc-with-an-irc-offered-over-ssl/3855#3855][How can I use ERC with an IRC offered over SSL?]]

: (require 'tls)
:
: (setq tls-program '("openssl s_client -connect %h:%p -no_ssl2 -ign_eof
:                                        -CAfile /home/ootput/.private/certs/CAs.pem
:                                        -cert /home/ootput/.private/certs/nick.pem"
:                     "gnutls-cli --priority secure256
:                                  --x509cafile /home/ootput/.private/certs/CAs.pem
:                                  --x509certfile /home/ootput/.private/certs/nick.pem -p %p %h"
:                     "gnutls-cli --priority secure256 -p %p %h"))
:
: (defun start-irc ()
:   "Connect to IRC."
:   (interactive)
:   (erc-tls :server "irc.gitter.im" :port 6697
:            :nick "mcraveiro" :full-name "Marco Craveiro")
:   (erc :server "irc.freenode.net" :port 6667
:        :nick "ootput" :full-name "ootput")
:   (setq erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#screen" "#ion")
:                                       ("oftc.net" "#debian"))))
:
:
: (require 'erc)
: (erc-tls :server "irc.gitter.im" :port 6667) ;; M-x erc-tls -> irc.gitter.im -> accept default PORT.
*** COMPLETED Design a simple project structure for use cases         :story:
    CLOSED: [2016-01-20 Wed 16:58]
    CLOCK: [2016-01-20 Wed 17:18]--[2016-01-20 Wed 17:29] =>  0:11
    CLOCK: [2016-01-20 Wed 14:35]--[2016-01-20 Wed 16:56] =>  2:21

We need to encapsulate all of the VTK processing into its own project,
with very few Qt dependencies (the VTK widget and QWidget) . We will
need:

- a transformer to convert a SWC point into the equivalent VTK
  representation.
- a workflow to create the QWidget.

We also should create a project to encapsulate all of the geometric
objects. Originally we looked into using Boost.Geometry or CGAL
natively for this, but none of them seem to have the polyhedra that we
need for VTK.

*** COMPLETED Rename =swc::file= to =swc::model=                      :story:
    CLOSED: [2016-01-20 Wed 17:17]
    CLOCK: [2016-01-20 Wed 17:10]--[2016-01-20 Wed 17:17] =>  0:07

In reality we are not representing a file as such, but the underlying
model. We should rename this type.

*** COMPLETED Create the =geometry.swc= project                       :story:
    CLOSED: [2016-01-22 Fri 15:58]
    CLOCK: [2016-01-22 Fri 13:49]--[2016-01-22 Fri 15:58] =>  2:09
    CLOCK: [2016-01-20 Wed 17:30]--[2016-01-20 Wed 17:59] =>  0:29

We need a very simple converter that takes an =swc::model= and
converts it into a =geometry::plane=. To start off with we can
hard-code the algorithm.

*** COMPLETED Create the =geometry= project                           :story:
    CLOSED: [2016-01-22 Fri 15:58]

We need a very simple project with the basic polyhedra.

*** COMPLETED Create a =vtk.geometry= project                         :story:
    CLOSED: [2016-01-22 Fri 15:58]

We need a trivial project that takes a plane and converts it into a
VTK pipeline and a QT VTK widget.

*** COMPLETED Refactor code to fit the new project structure          :story:
    CLOSED: [2016-01-25 Mon 21:29]
    CLOCK: [2016-01-25 Mon 20:35]--[2016-01-25 Mon 21:27] =>  0:52
    CLOCK: [2016-01-25 Mon 15:01]--[2016-01-25 Mon 15:27] =>  0:26
    CLOCK: [2016-01-25 Mon 14:27]--[2016-01-25 Mon 15:00] =>  0:33
    CLOCK: [2016-01-25 Mon 14:10]--[2016-01-25 Mon 14:26] =>  0:16

We need to move across the code we had into this new project
structure.

*** COMPLETED Understand the fundamentals of placing objects in space :story:
    CLOSED: [2016-01-25 Mon 21:32]
    CLOCK: [2016-01-19 Tue 16:58]--[2016-01-19 Tue 17:32] =>  0:34
    CLOCK: [2016-01-19 Tue 15:12]--[2016-01-19 Tue 16:57] =>  1:45
    CLOCK: [2016-01-19 Tue 15:11]--[2016-01-19 Tue 15:33] =>  0:22
    CLOCK: [2016-01-19 Tue 14:10]--[2016-01-19 Tue 14:45] =>  0:35
    CLOCK: [2016-01-18 Mon 17:21]--[2016-01-18 Mon 17:59] =>  0:38
    CLOCK: [2016-01-18 Mon 16:56]--[2016-01-18 Mon 17:20] =>  0:24
    CLOCK: [2016-01-18 Mon 16:15]--[2016-01-18 Mon 16:56] =>  0:41
    CLOCK: [2016-01-18 Mon 14:55]--[2016-01-18 Mon 16:08] =>  1:13
    CLOCK: [2016-01-18 Mon 14:13]--[2016-01-18 Mon 14:40] =>  0:27

Our ball and stick SWC now draws correctly in VTK. However, the
linkages between geometric objects are missing. Try to get this
representation correct.

Notes:

- what should the height of the cylinder be?
- what is the name for a simple coordinate-wise distance?
- rotation and translation: [[http://www.paraview.org/Wiki/VTK/Examples/Cxx/PolyData/TransformOrderDemo][TransformOrderDemo.cxx]]
- positive angle anti-clockwise, negative angle clockwise.
- [[https://www.khanacademy.org/math/basic-geo/transformations-congruence-similarity-geo/transformations-basics/v/translations-of-polygons][videos on rotation]].
- [[https://en.wikipedia.org/wiki/Rotation_matrix#In_two_dimensions][Rotation matrix]]
- this can be done but it requires calculating distances between
  points to obtain the correct height and rotation angle. For this we
  need for all the data to be organised correctly.

*** COMPLETED Get a basic understanding of required maths terminology :story:
    CLOSED: [2016-01-26 Tue 16:53]

We need to make sure we understand the basics in terms of maths
terminology for geometry.

**** Notes
     CLOCK: [2016-01-26 Tue 17:41]--[2016-01-26 Tue 18:01] =>  0:20
     CLOCK: [2016-01-26 Tue 15:54]--[2016-01-26 Tue 16:53] =>  0:59
     CLOCK: [2016-01-26 Tue 14:10]--[2016-01-26 Tue 15:32] =>  1:22

- [[https://en.wikipedia.org/wiki/Finitary_relation][relation]]: n mathematics, a finitary relation has a finite number of
  "places". In set theory and logic, a relation is a property that
  assigns truth values to k-tuples of individuals. Typically, the
  property describes a possible connection between the components of a
  k-tuple. For a given set of k-tuples, a truth value is assigned to
  each k-tuple according to whether the property does or does not
  hold.

  A [[http://mathworld.wolfram.com/Relation.html][relation]] is any subset of a Cartesian product. For instance, a
  subset of A×B, called a "binary relation from A to B," is a
  collection of ordered pairs (a,b) with first components from A and
  second components from B, and, in particular, a subset of A×A is
  called a "relation on A." For a binary relation R, one often writes
  aRb to mean that (a,b) is in R×R.

- [[https://en.wikipedia.org/wiki/Binary_relation][binary relation]]: binary relation on a set A is a collection of
  ordered pairs of elements of A. In other words, it is a subset of
  the Cartesian product A2 = A × A. More generally, a binary relation
  between two sets A and B is a subset of A × B.

  Given a set of objects S, a [[http://mathworld.wolfram.com/BinaryRelation.html][binary relation]] is a subset of the
  Cartesian product S tensor S.

- [[https://en.wikipedia.org/wiki/Function_(mathematics)#Binary_operations][function]]: In mathematics, a function[1] is a relation between a set
  of inputs and a set of permissible outputs with the property that
  each input is related to exactly one output.

  [[http://isites.harvard.edu/fs/docs/icb.topic1524705.files/Relations%2520and%2520functions.pdf][Binary relations and Functions]]

- [[https://en.wikipedia.org/wiki/Arity][arity]]: In logic, mathematics, and computer science, the arity
  Listeni/ˈærᵻti/ of a function or operation is the number of
  arguments or operands that the function takes. The arity of a
  relation (or predicate) is the dimension of the domain in the
  corresponding Cartesian product. (A function of arity n thus has
  arity n+1 considered as a relation.)

- operation: An operation ω is a function of the form ω : V → Y, where
  V ⊂ X1 × … × Xk. The sets Xk are called the domains of the
  operation, the set Y is called the codomain of the operation, and
  the fixed non-negative integer k (the number of arguments) is called
  the type or arity of the operation. Thus a unary operation has arity
  one, and a binary operation has arity two. An operation of arity
  zero, called a nullary operation, is simply an element of the
  codomain Y. An operation of arity k is called a k-ary
  operation. Thus a k-ary operation is a (k+1)-ary relation that is
  functional on its first k domains.

- [[http://math.stackexchange.com/questions/168378/operator-vs-function][operation vs function]]: A binary operation on a set S x S is a
  special kind of function; namely, it is a function S×S→S x S×S→S. That
  is, it takes as input two elements of SS and returns another element
  of SS. We can denote such an operation by a symbol such as a⋆ba⋆b
  and then demand various additional properties of this operation,
  such as

  associativity: (a⋆b)⋆c=a⋆(b⋆c)(a⋆b)⋆c=a⋆(b⋆c),
  commutativity: a⋆b=b⋆aa⋆b=b⋆a

  and so forth. On the other hand, an arbitrary function f:A→Bf:A→B
  between two sets only takes a single input and returns an output which
  is not necessarily of the same type, so one can't speak of
  associativity or commutativity for such a thing. One might call a
  function f:A→Af:A→A a unary operation but one still can't speak of
  associativity or commutativity for such a thing.

- [[http://mathworld.wolfram.com/Set.html][set]]: finite or infinite collection of objects in which order has no
  significance, and multiplicity is generally also ignored. Members of
  a set are often referred to as elements and the notation a in A is
  used to denote that a is an element of a set A.

- [[http://mathworld.wolfram.com/Ring.html][ring]]: a set S together with two binary operators + and * satisfying
  the following conditions:
  1. Additive associativity: For all a,b,c in S, (a+b)+c=a+(b+c),
  2. Additive commutativity: For all a,b in S, a+b=b+a,
  3. Additive identity: There exists an element 0 in S such that for
     all a in S, 0+a=a+0=a,
  4. Additive inverse: For every a in S there exists  -a in S such
     that a+(-a)=(-a)+a=0,
  5. Left and right distributivity: For all a,b,c in S,
     a*(b+c)=(a*b)+(a*c) and (b+c)*a=(b*a)+(c*a),
  6. Multiplicative associativity: For all a,b,c in S, (a*b)*c=a*(b*c)
     (a ring satisfying this property is sometimes explicitly termed
     an associative ring).
- [[http://mathworld.wolfram.com/Field.html][field]]: A field is any set of elements that satisfies the field
  axioms for both addition and multiplication and is a commutative
  division algebra.
  7. Multiplicative commutativity: For all a,b in S, a*b=b*a (a ring
     satisfying this property is termed a commutative ring),
  8. Multiplicative identity: There exists an element 1 in S such that
     for all a!=0 in S, 1*a=a*1=a (a ring satisfying this property is
     termed a unit ring, or sometimes a "ring with identity"),
  9. Multiplicative inverse: For each a!=0 in S, there exists an
     element a^(-1) in S such that for all a!=0 in S,
     a*a^(-1)=a^(-1)*a=1, where 1 is the identity element.

- [[https://en.wikipedia.org/wiki/Plane_(geometry)][plane]]: In mathematics, a plane is a flat, two-dimensional surface
  that extends infinitely far. A plane is the two-dimensional analogue
  of a point (zero dimensions), a line (one dimension) and
  three-dimensional space. Planes can arise as subspaces of some
  higher-dimensional space, as with a room's walls extended infinitely
  far, or they may enjoy an independent existence in their own right,
  as in the setting of Euclidean geometry.

  When working exclusively in two-dimensional Euclidean space, the
  definite article is used, so, the plane refers to the whole
  space. Many fundamental tasks in mathematics, geometry,
  trigonometry, graph theory and graphing are performed in a
  two-dimensional space, or in other words, in the plane.

- [[https://en.wikipedia.org/wiki/Euclidean_space][Euclidean space]]: encompasses the two-dimensional Euclidean plane,
  the three-dimensional space of Euclidean geometry, and certain other
  spaces. It is named after the Ancient Greek mathematician Euclid of
  Alexandria. The term "Euclidean" distinguishes these spaces from
  other types of spaces considered in modern geometry. Euclidean
  spaces also generalize to higher dimensions.

- [[http://mathworld.wolfram.com/Space.html][space]]: The concept of a space is an extremely general and important
  mathematical construct. Members of the space obey certain addition
  properties. Spaces which have been investigated and found to be of
  interest are usually named after one or more of their
  investigators. This practice unfortunately leads to names which give
  very little insight into the relevant properties of a given space.

  [[https://en.wikipedia.org/wiki/Space_(mathematics)][space]]: In mathematics, a space is a set (sometimes called a
  universe) with some added structure. In mathematics, a structure on
  a set, or more generally a type, consists of additional mathematical
  objects that, in some manner, attach (or relate) to the set,
  endowing the collection with meaning or significance.

  A partial list of possible structures are measures, algebraic
  structures (groups, fields, etc.), ...

- [[https://en.wikipedia.org/wiki/Vector_space][vector space]]: A vector space (also called a linear space) is a
  collection of objects called vectors, which may be added together
  and multiplied ("scaled") by numbers, called scalars in this
  context. Scalars are often taken to be real numbers, but there are
  also vector spaces with scalar multiplication by complex numbers,
  rational numbers, or generally any field. The operations of vector
  addition and scalar multiplication must satisfy certain
  requirements.

  Vector spaces are the subject of linear algebra and are well
  understood from this point of view since vector spaces are
  characterized by their dimension, which, roughly speaking, specifies
  the number of independent directions in the space.

- vectors:

  [[http://tutorial.math.lamar.edu/Classes/CalcII/Vectors_Basics.aspx][Vectors: The Basics]]

- [[http://mathworld.wolfram.com/NormalizedVector.html][Normalized Vector]]: The normalized vector of X is a vector in the
  same direction but with norm (length) 1. It is denoted  X^^ and
  given by

  X^^=(X)/(|X|),

  where |X| is the norm of X. It is also called a unit vector.

- [[https://en.wikipedia.org/wiki/Row_and_column_vectors][Rown and column vectors]]: n linear algebra, a column vector or column
  matrix is an m × 1 matrix, that is, a matrix consisting of a single
  column of m elements; Similarly, a row vector or row matrix is a 1 ×
  m matrix, that is, a matrix consisting of a single row of m
  elements.

- [[https://en.wikipedia.org/wiki/Rotation_matrix#In_two_dimensions][rotation matrix]]: In linear algebra, a rotation matrix is a matrix
  that is used to perform a rotation in Euclidean space. For example
  the matrix:

  cos theta   -sin theta
  sin theta    cos theta

  rotates points in the xy-Cartesian plane counter-clockwise through
  an angle θ about the origin of the Cartesian coordinate system. To
  perform the rotation using a rotation matrix R, the position of each
  point must be represented by a column vector v, containing the
  coordinates of the point. A rotated vector is obtained by using the
  matrix multiplication Rv.

- [[http://www.blitzbasic.com/Community/posts.php?topic%3D73560][basic trig notes]]

- [[https://www.khanacademy.org/math/basic-geo/transformations-congruence-similarity-geo/transformations-basics/v/translations-of-polygons][Translations of polygons]]

**** Chat with ND
     CLOCK: [2016-01-26 Tue 15:33]--[2016-01-26 Tue 15:53] =>  0:20

- length of vector, euclidian distance
- put vector into normal form: divide by length.
- when vectors are normalised, the dot products will be 1 for
  parallel, zero for right-angle.
- angle: tan(theta) = B / A.

*** COMPLETED Add support for CGAL                                    :story:
    CLOSED: [2016-01-26 Tue 17:28]
    CLOCK: [2016-01-26 Tue 16:54]--[2016-01-26 Tue 17:28] =>  0:34
    CLOCK: [2016-01-26 Tue 13:45]--[2016-01-26 Tue 14:09] =>  0:24

We need to get a simple CGAL example to compile and run, adding all
the required infrastructure (debian packages, CMake files, etc).

- manual: [[http://mati-repa-repo.googlecode.com/svn/trunk/tesis/impl/tutoriales/CGAL%2520Arrangements.pdf][CGAL Arrangements and Their Applications]]
- [[https://raw.githubusercontent.com/pgRouting/pgrouting/master/cmake/FindCGAL.cmake][FindCgal]] from pgRouting project
- [[https://cel.archives-ouvertes.fr/file/index/docid/340448/filename/whole-course.pdf][CGAL - the Computational Geometry Algorithms Library]]

*** STARTED Render a realistic SWC file                               :story:
    CLOCK: [2016-01-26 Tue 13:31]--[2016-01-26 Tue 13:44] =>  0:13
    CLOCK: [2016-01-25 Mon 21:34]--[2016-01-25 Mon 22:39] =>  1:05

We need to make sure we can use the code to render realistic SWC
files. We also need to find fixes to the performance issues when we do
this.

Links:

- [[http://www.vtk.org/pipermail/vtkusers/2011-June/068115.html][{vtkusers} Large number of actors]]: How to render using over 5K x 1K
  poly data.
- [[http://www.paraview.org/Wiki/VTK/Tutorials/Composite_Datasets][VTK/Tutorials/Composite Datasets]]

Notes:

- we could use a vtkMultiBlockDataSet, reusing mappers and actors.
- seems like this is not what we want: [[http://public.kitware.com/pipermail/vtkusers/2013-August/081502.html][Rendering huge amount of
  polyData with 1 actor and
  vtkMultiBlockDataSet/vtkCompositePolyDataMapper2]]
- we just need the transformations to be done once; there must be a
  way of applying a transformation and then removing it from
  pipeline. Perhaps we are already doing that since we are applying
  the transform to the poly data rather than the actor.

*** STARTED Create a processor in =geometry.swc= to organise the points :story:
    CLOCK: [2016-01-27 Wed 15:28]--[2016-01-27 Wed 17:57] =>  2:29
    CLOCK: [2016-01-27 Wed 15:00]--[2016-01-27 Wed 15:28] =>  0:28
    CLOCK: [2016-01-27 Wed 14:10]--[2016-01-27 Wed 15:00] =>  0:50
    CLOCK: [2016-01-26 Tue 17:29]--[2016-01-26 Tue 17:40] =>  0:11

Now we understand how to place objects in space, we need to compute
all of the required transformations to get the polyhedra in the
correct orientation. This will require:

- some kind of container of points by parent so we can find them.
- CGAL support so we can figure out the orientation.

Notes on CGAL:

This is not yet clear, but it seems useful to have a stand alone
project with the CGAL dependency. At present we just need a way to
subtract 3D points:

[[http://doc.cgal.org/latest/Kernel_23/classCGAL_1_1Point__3.html#a13fbe61503fadf1ea7f66d34652353d1][CGAL::Point_3< Kernel > Class Template Reference]]

We need to obtain a structure of these differences. We should also
compute the expected heights and angles of rotation. This information
could be stored in =swc= data structures.

It is not clear if we should just add a dependency to CGAL in =swc= or
create a stand alone project.

Notes:

- [[http://doc.cgal.org/latest/Kernel_23/group__normal__grp.html][normal]]
- [[http://doc.cgal.org/latest/Manual/introduction.html][hello world example]]
- [[http://doc.cgal.org/latest/Kernel_23/classCGAL_1_1Point__3.html#a13fbe61503fadf1ea7f66d34652353d1][point 3d operator-]]: Creating vectors by subtracting two points.
- [[http://cgal-discuss.949826.n4.nabble.com/Calculate-angle-td950283.html][calculating angles from points]]
- [[https://www.mathsisfun.com/algebra/vectors-dot-product.html][dot product]]

*** Create a feature for QT/VTK                                       :story:

At present the build is broken because travis does not support QT5 and
VTK6. We should wrap this code with a feature and not use it on the
build machine so that at least we can run other tests.

*** Update =soma= to use the new infrastructure                       :story:

To start off with we should just create a class in =soma= that acts as
glue and orchestrates all of the other components.

*** Ignore comments on =swc=                                          :story:

At present we are choking on our data files due to the headers. Do a
simple hack on the parser to ignore comments.

*** Create a blog post on SWC                                         :story:

- describe format
- describe the reconstruction and generative processes

*** Validate geometric work with realistic SWC models                 :story:

Ensure the code still works when using more complex SWC models. We
have one at present but we should download several, with different
sizes, e.g. 5K points, 50k points, and so on.

*** Create a blog post on basic maths terminology                     :story:

Now we understood the basics, we should apply the usual Feynman
technique and write a blog post about it.

** Deprecated
*** CANCELLED Create a VTK setup from github                          :story:
    CLOSED: [2016-01-05 Tue 16:35]

*Rationale*: Recent'ish packages have hit testing so no need to use
the source, luke.

It seems the debian packages are a bit outdated. Build from source.

- [[http://www.vtk.org/Wiki/VTK/Building/Linux][VTK/Building/Linux]]
- [[http://www.vtk.org/Wiki/VTK/Tutorials/QtSetup][VTK/Tutorials/QtSetup]]
- [[https://www.youtube.com/watch?v%3Dsb5FTVGqhPo][Building Qt-enabled VTK applications]]
- [[http://mitk.org/wiki/MITK][The Medical Imaging Interaction Toolkit (MITK)]]
- [[http://docs.mitk.org/2015.05/Architecture.html][MITK Artchitecture]]
- [[http://www.commontk.org/index.php/Main_Page][CTK - The Common Toolkit]]

: sudo apt-get install qtbase5-dev qttools5-dev
: git clone git@github.com:Kitware/VTK.git
: cd VTK
: mkdir build
: cd build
: CMAKE_INCLUDE_PATH=/usr/local/personal/include CMAKE_LIBRARY_PATH=/usr/local/personal/lib cmake -DCMAKE_INSTALL_PREFIX=/home/marco/Development/phd/local -DVTK_QT_VERSION:STRING=5 -DVTK_Group_Qt:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja ..
: cd ~/Development/phd/neurite/build/output/gcc-5/ && CMAKE_INCLUDE_PATH=/usr/local/personal/include:/home/marco/Development/phd/local/include CMAKE_LIBRARY_PATH=/usr/local/personal/lib:/home/marco/Development/phd/local/lib CC=gcc-5 CXX=g++-5 CMAKE_PROGRAM_PATH=/home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc-5/stage/bin VTK_DIR=/home/marco/Development/phd/local/lib/cmake/vtk-6.3/ cmake -DVERBOSE=1 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ../../../ -G Ninja && ninja -j2 soma
: cmake -DVTK_QT_VERSION:STRING=5 -DVTK_Group_Qt:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja ..
