#+title: Sprint Backlog 06
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission

- Integrate VTK with CGAL
- Create a mesh wit CGAL

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2016-01-19 Tue 17:51]
| <75>                                                                        |        |      |      |
| Headline                                                                    | Time   |      |      |
|-----------------------------------------------------------------------------+--------+------+------|
| *Total time*                                                                | *8:13* |      |      |
|-----------------------------------------------------------------------------+--------+------+------|
| Stories                                                                     | 8:13   |      |      |
| Active                                                                      |        | 8:13 |      |
| STARTED Sprint and product backlog grooming                                 |        |      | 0:44 |
| STARTED Journal club and other activities                                   |        |      | 0:25 |
| COMPLETED Setup access to bio-computation irc channel                       |        |      | 0:25 |
| STARTED Place objects in correct locations in space                         |        |      | 6:39 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2016-01-19 Tue 17:33]--[2016-01-19 Tue 17:55] =>  0:17
    CLOCK: [2016-01-18 Mon 13:50]--[2016-01-18 Mon 14:12] =>  0:22

Updates to sprint and product backlog.

*** STARTED Journal club and other activities                         :story:
    CLOCK: [2016-01-18 Mon 16:03]--[2016-01-18 Mon 16:14] =>  0:11
    CLOCK: [2016-01-18 Mon 14:41]--[2016-01-18 Mon 14:55] =>  0:14

Time spent in generic tasks.

- sorting out supervision.

*** Chat with btn                                                     :story:

Any time spent with updates.

*** COMPLETED Setup access to bio-computation irc channel             :story:
    CLOSED: [2016-01-19 Tue 15:11]
    CLOCK: [2016-01-19 Tue 14:46]--[2016-01-19 Tue 15:11] =>  0:25

Biocomputation has a gitter IRC channel. We should join it using
emacs.

Notes:

- [[http://www.emacswiki.org/emacs/ErcSSL][ERC with SSL support]]
- [[http://emacs.stackexchange.com/questions/3846/how-can-i-use-erc-with-an-irc-offered-over-ssl/3855#3855][How can I use ERC with an IRC offered over SSL?]]

: (require 'tls)
:
: (setq tls-program '("openssl s_client -connect %h:%p -no_ssl2 -ign_eof
:                                        -CAfile /home/ootput/.private/certs/CAs.pem
:                                        -cert /home/ootput/.private/certs/nick.pem"
:                     "gnutls-cli --priority secure256
:                                  --x509cafile /home/ootput/.private/certs/CAs.pem
:                                  --x509certfile /home/ootput/.private/certs/nick.pem -p %p %h"
:                     "gnutls-cli --priority secure256 -p %p %h"))
:
: (defun start-irc ()
:   "Connect to IRC."
:   (interactive)
:   (erc-tls :server "irc.gitter.im" :port 6697
:            :nick "mcraveiro" :full-name "Marco Craveiro")
:   (erc :server "irc.freenode.net" :port 6667
:        :nick "ootput" :full-name "ootput")
:   (setq erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#screen" "#ion")
:                                       ("oftc.net" "#debian"))))
:
:
: (require 'erc)
: (erc-tls :server "irc.gitter.im" :port 6667) ;; M-x erc-tls -> irc.gitter.im -> accept default PORT.

*** STARTED Place objects in correct locations in space               :story:
    CLOCK: [2016-01-19 Tue 16:58]--[2016-01-19 Tue 17:32] =>  0:34
    CLOCK: [2016-01-19 Tue 15:12]--[2016-01-19 Tue 16:57] =>  1:45
    CLOCK: [2016-01-19 Tue 15:11]--[2016-01-19 Tue 15:33] =>  0:22
    CLOCK: [2016-01-19 Tue 14:10]--[2016-01-19 Tue 14:45] =>  0:35
    CLOCK: [2016-01-18 Mon 17:21]--[2016-01-18 Mon 17:59] =>  0:38
    CLOCK: [2016-01-18 Mon 16:56]--[2016-01-18 Mon 17:20] =>  0:24
    CLOCK: [2016-01-18 Mon 16:15]--[2016-01-18 Mon 16:56] =>  0:41
    CLOCK: [2016-01-18 Mon 14:55]--[2016-01-18 Mon 16:08] =>  1:13
    CLOCK: [2016-01-18 Mon 14:13]--[2016-01-18 Mon 14:40] =>  0:27

Our ball and stick SWC now draws correctly in VTK. However, the
linkages between geometric objects are missing. Try to get this
representation correct.

Notes:

- what should the height of the cylinder be?
- what is the name for a simple coordinate-wise distance?
- rotation and translation: [[http://www.paraview.org/Wiki/VTK/Examples/Cxx/PolyData/TransformOrderDemo][TransformOrderDemo.cxx]]
- positive angle anti-clockwise, negative angle clockwise.
- [[https://www.khanacademy.org/math/basic-geo/transformations-congruence-similarity-geo/transformations-basics/v/translations-of-polygons][videos on rotation]].
- [[https://en.wikipedia.org/wiki/Rotation_matrix#In_two_dimensions][Rotation matrix]]
- this can be done but it requires calculating distances between
  points to obtain the correct height and rotation angle. For this we
  need for all the data to be organised correctly.

*** Add progress bar for operations                                   :story:

We should have some way of monitoring SWC loading progress as well as
VTK conversion progress. Find a UI for this.

*** Create a processor in =swc= to organise the points                :story:

We need to take a raw SWC file and create a map by sample number.

*** Create a =swc.cgal= project                                       :story:

This is not yet clear, but it seems useful to have a stand alone
project with the CGAL dependency. At present we just need a way to
subtract 3D points:

[[http://doc.cgal.org/latest/Kernel_23/classCGAL_1_1Point__3.html#a13fbe61503fadf1ea7f66d34652353d1][CGAL::Point_3< Kernel > Class Template Reference]]

We need to obtain a structure of these differences. We should also
compute the expected heights and angles of rotation. This information
could be stored in =swc= data structures.

It is not clear if we should just add a dependency to CGAL in =swc= or
create a stand alone project.

*** Create a =swc.vtk= project                                        :story:

We need to encapsulate all of the VTK processing into its own project,
with very few Qt dependencies (the VTK widget and QWidget) . We will
need:

- a transformer to convert a SWC point into the equivalent VTK
  representation.
- a workflow to create the QWidget.

*** Add menu to soma and find file                                    :story:

We need a way to load up different SWC files from the command line.

*** Ignore comments on SWC                                            :story:

At present we are choking on our data files due to the headers. Do a
simple hack on the parser to ignore comments.

*** Parse btmorph's source                                            :story:

We need to understand how btmorph is able to visualise SWC
files. First get it to work, then parse the source.

: apt-get install python-matplotlib python-numpy python-scipy
: git clone https://bitbucket.org/btorb/btmorph.git
: cd btmorph/btmorph
: export PYTHONPATH=$(pwd):$PYTHONPATH
: import btmorph
: import numpy
: import matplotlib.pyplot as plt
: btmorph.plot_2D_SWC("neurite/test_data/swc/ball_and_stick.swc")

Use ipython:

: export PYTHONPATH=$PYTHONPATH:/home/marco/Development/phd/btmorph
: import btmorph
: btmorph.plot_2D_SWC('/home/marco/Development/phd/neurite/test_data/swc/ball_and_stick.swc')
: btmorph.plot_3D_SWC('/home/marco/Development/phd/neurite/test_data/swc/ball_and_stick.swc')

*** Create a blog post on SWC                                         :story:

- describe format
- describe the reconstruction and generative processes

*** Create a geometric representation of the realistic SWC file       :story:

Ensure the code still works on a more complex file format.

*** Create a simple XML based format                                  :story:

- use data from a CGAL/VTK file representing an SWC file.
- compare the size against SWC, using different polygon scales.
- keep in mind large sizes such as 1M
- take into account realistic morphologies such as sourced from EM
  where the number of "compartments" would be extremely large. This
  could be done via scaling (e.g. EM has 1000 more compartments, etc).

*** Add SWC validation support                                        :story:

We need to perform some basic validation on the SWC file. For an
example in python see
[[https://senselab.med.yale.edu/modeldb/ShowModel.cshtml?model%3D168858&file%3D%255CCoskrenEtAl2015%255CHHmodel%255CScripts%255CPython%255Clib%255CSwc.py][this
reader]].

- ID's must be unique.
- parent id's must exist in file.
- there must be one and only one soma.
- there must be one and only one root. Root must be soma?
- types must be well-defined - warning only?
- all nodes must be reachable from root.
- graph must be acyclic

*** Create a presentation on 3D neuronal morphologies                 :story:

We need to explain the processes around it: how do they come about,
what are they used for, existing formats. Actually one way of tackling
this is to create a blog post first and then summarise it in the
presentation.

*** Add support for CGAL                                              :story:

We need to get a simple CGAL example to compile and run, adding all
the required infrastructure (debian packages, CMake files, etc).

*** Add XSD tool support to neurite                                   :story:

Create a simple XSD schema and get it to code generate to C++ using
the [[http://www.codesynthesis.com/products/xsd/][XSD tool]]. This will be used for the XML file format.

*** Start a blog post talking about polygon meshes                    :story:

We don't necessarily need to finish it this sprint but we need to
start collecting all the terminology, etc in a blog post.

*** Create a very simple polygon mesh using CGAL                      :story:

Get the sample from Ben of a very simple model and using the
[[http://doc.cgal.org/latest/Mesh_3/][3D Mesh Generation]]
documentation, try to generate a simple mesh.
** Deprecated
*** CANCELLED Create a VTK setup from github                          :story:
    CLOSED: [2016-01-05 Tue 16:35]

*Rationale*: Recent'ish packages have hit testing so no need to use
the source, luke.

It seems the debian packages are a bit outdated. Build from source.

- [[http://www.vtk.org/Wiki/VTK/Building/Linux][VTK/Building/Linux]]
- [[http://www.vtk.org/Wiki/VTK/Tutorials/QtSetup][VTK/Tutorials/QtSetup]]
- [[https://www.youtube.com/watch?v%3Dsb5FTVGqhPo][Building Qt-enabled VTK applications]]
- [[http://mitk.org/wiki/MITK][The Medical Imaging Interaction Toolkit (MITK)]]
- [[http://docs.mitk.org/2015.05/Architecture.html][MITK Artchitecture]]
- [[http://www.commontk.org/index.php/Main_Page][CTK - The Common Toolkit]]

: sudo apt-get install qtbase5-dev qttools5-dev
: git clone git@github.com:Kitware/VTK.git
: cd VTK
: mkdir build
: cd build
: CMAKE_INCLUDE_PATH=/usr/local/personal/include CMAKE_LIBRARY_PATH=/usr/local/personal/lib cmake -DCMAKE_INSTALL_PREFIX=/home/marco/Development/phd/local -DVTK_QT_VERSION:STRING=5 -DVTK_Group_Qt:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja ..
: cd ~/Development/phd/neurite/build/output/gcc-5/ && CMAKE_INCLUDE_PATH=/usr/local/personal/include:/home/marco/Development/phd/local/include CMAKE_LIBRARY_PATH=/usr/local/personal/lib:/home/marco/Development/phd/local/lib CC=gcc-5 CXX=g++-5 CMAKE_PROGRAM_PATH=/home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc-5/stage/bin VTK_DIR=/home/marco/Development/phd/local/lib/cmake/vtk-6.3/ cmake -DVERBOSE=1 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ../../../ -G Ninja && ninja -j2 soma
: cmake -DVTK_QT_VERSION:STRING=5 -DVTK_Group_Qt:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja ..
