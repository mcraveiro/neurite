#+title: Sprint Backlog 08
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission

- Create a simple mesh.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2016-04-15 Fri 15:54]
| <75>                                                                        |         |       |      |       |
| Headline                                                                    | Time    |       |      |     % |
|-----------------------------------------------------------------------------+---------+-------+------+-------|
| *Total time*                                                                | *26:05* |       |      | 100.0 |
|-----------------------------------------------------------------------------+---------+-------+------+-------|
| Stories                                                                     | 26:05   |       |      | 100.0 |
| Active                                                                      |         | 26:05 |      | 100.0 |
| COMPLETED Sprint and product backlog grooming                               |         |       | 0:26 |   1.7 |
| COMPLETED Journal club and lectures                                         |         |       | 1:10 |   4.5 |
| COMPLETED Socialising                                                       |         |       | 0:50 |   3.2 |
| COMPLETED Read up on the basics of geometry and meshes                      |         |       | 6:29 |  24.9 |
| COMPLETED Review OpenScad code                                              |         |       | 9:29 |  36.4 |
| POSTPONED Create a polygon mesh with the simple SWC file                    |         |       | 3:51 |  14.8 |
| POSTPONED Read McGregor's paper                                             |         |       | 3:50 |  14.7 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** COMPLETED Sprint and product backlog grooming                     :story:
    CLOSED: [2016-04-15 Fri 15:54]
    CLOCK: [2016-03-14 Mon 11:00]--[2016-03-14 Mon 11:06] =>  0:06
    CLOCK: [2016-02-29 Mon 14:15]--[2016-02-29 Mon 14:35] =>  0:20

Updates to sprint and product backlog.

*** COMPLETED Journal club and lectures                               :story:
    CLOSED: [2016-04-15 Fri 15:54]
    CLOCK: [2016-02-19 Fri 16:00]--[2016-02-19 Fri 17:10] =>  1:10

Time spent in generic tasks.

- sorting out supervision.

*** COMPLETED Socialising                                             :story:
    CLOSED: [2016-04-15 Fri 15:54]
    CLOCK: [2016-02-19 Fri 17:11]--[2016-02-19 Fri 18:01] =>  0:50

Any events during work hours not directly connected to work.

*** COMPLETED Read up on the basics of geometry and meshes            :story:
    CLOSED: [2016-04-15 Fri 15:54]
    CLOCK: [2016-03-28 Mon 08:01]--[2016-03-28 Mon 10:10] =>  2:09
    CLOCK: [2016-03-16 Wed 10:15]--[2016-03-16 Wed 11:46] =>  1:31
    CLOCK: [2016-03-14 Mon 08:10]--[2016-03-14 Mon 10:59] =>  2:52

In order to understand the CGAL API we need to understand the basics
of geometry applied to CG. A good website for this is [[http://www.scratchapixel.com/][Scratch
Pixel]]. Go through the basic lessons.

Geometry:

- [[http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/points-vectors-and-normals][Points, Vectors and Normals]]
- [[http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/coordinate-systems][Coordinate Systems]]
- [[http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/math-operations-on-points-and-vectors][Math Operations on Points and Vectors]]
- [[http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/matrices][Matrices]]
- [[http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/how-does-matrix-work-part-1][How Does Matrix Work: Part 1]]
- [[http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/how-does-matrix-work-part-2][How does matrix work: part 2]]

Meshes

- [[http://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-polygon-mesh][Introduction to polygon meshes]]
- [[http://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-polygon-mesh/polygon-mesh-file-formats][File Formats to Store Polygon Meshes: OBJ, FBX, RenderMan, etc.]]

CGAL:

- [[https://www.youtube.com/watch?v%3D3DLfkWWw_Tg][CGAL: The Open Source Computational Geometry Algorithms Library]]
- [[https://www.youtube.com/watch?v%3DMk-NH2-_hMo][CGAL --- Part 1 of N --- Introduction]]
- [[https://www.youtube.com/watch?v%3DR8hlJCR4xO0][CGAL --- Part 2 of N --- Polygon Meshes]]
- [[https://www.youtube.com/watch?v%3Dt_zvp9dTTBY][CGAL -- Part 3 of N --- Subdivision Surface Methods]]

*** COMPLETED Review OpenScad code                                    :story:
    CLOSED: [2016-04-15 Fri 15:54]
    CLOCK: [2016-03-29 Tue 09:01]--[2016-03-29 Tue 13:32] =>  4:31
    CLOCK: [2016-03-28 Mon 16:31]--[2016-03-28 Mon 18:30] =>  1:59
    CLOCK: [2016-03-28 Mon 12:38]--[2016-03-28 Mon 13:10] =>  0:32
    CLOCK: [2016-03-28 Mon 10:11]--[2016-03-28 Mon 12:38] =>  2:27

Now it seems clear its not possible to directly use CSG in CGAL, we
should review existing CSG implementations and see if we can
reuse/copy them. One such example is [[https://github.com/openscad/openscad][OpenScad]].

*** POSTPONED Create a polygon mesh with the simple SWC file          :story:
    CLOSED: [2016-04-15 Fri 15:54]
    CLOCK: [2016-03-15 Tue 09:43]--[2016-03-15 Tue 12:13] =>  2:30
    CLOCK: [2016-03-15 Tue 09:20]--[2016-03-15 Tue 09:43] =>  0:23
    CLOCK: [2016-03-14 Mon 11:07]--[2016-03-14 Mon 12:05] =>  0:58

We need to create a polygon mesh representation of the simple ball and
stick SWC file.

- [[http://doc.cgal.org/latest/Mesh_3/index.html][CGAL 4.7 - 3D Mesh Generation]]

Notes:

- Delaunay refinement:
- restricted Delaunay triangulation:
- requirements on the input domain: The domain to be meshed is assumed
  to be bounded and representable as a pure 3D complex. A 3D complex
  is a set of faces with dimension 0, 1, 2 and 3 such that all faces
  are pairwise interior disjoint, and the boundary of each face of the
  complex is the union of faces of the complex. The 3D complex is
  pure, meaning that each face is included in a face of dimension 3,
  so that the complex is entirely described by the set of its 3D faces
  and their subfaces.
- output mesh: This means that each subdomain is approximated by the
  union of the tetrahedral cells whose circumcenters are located
  inside the domain (or subdomain). Each surface patch is approximated
  by the union of the Delaunay mesh facets whose dual Voronoi edges
  intersect the surface patch. Such mesh facets are called surface
  facets in the following. The 1-dimensional exposed features are
  approximated by sequences of mesh edges and the 0-dimensional
  exposed features are represented by mesh vertices.
- The mesh density refers to the number of mesh vertices and cells,
  i.e. to the complexity of the mesh. The mesh quality referred to
  here is measured by the radius edge ratio of surface facets end mesh
  cells, where the radius edge ratio of a simplex (triangle or
  tetrahedron) is the the ratio between its circumradius and its
  shortest edge.
- [[http://cgal-discuss.949826.n4.nabble.com/newbie-question-3D-meshing-of-geometric-objects-cylinder-box-etc-amp-boolean-ops-td4657492.html][Meshing of geometric objects (cylinder, box, etc) & boolean ops]]:
  CGAL allows to mesh a domain whose boundary is defined by one of
  several implicit surfaces. See the example in subsection 3.5.2 of
  chapter 3D Mesh Generation of the user manual. However if the
  surfaces intersect and if you want the mesh to precisely reproduce
  the intersection curves you have to previously detect those
  intersections.
- [[http://stackoverflow.com/questions/33197841/create-parameterized-3d-primitives-with-cgal][Create parameterized 3D primitives with cgal]]

*** POSTPONED Read McGregor's paper                                   :story:
    CLOSED: [2016-04-15 Fri 15:54]
    CLOCK: [2016-03-18 Fri 09:04]--[2016-03-18 Fri 11:20] =>  2:16
    CLOCK: [2016-03-16 Wed 11:46]--[2016-03-16 Wed 13:20] =>  1:34

Now we understand the need for a CSG representation, McGregor's paper
on CTNG makes a lot more sense. Parse the paper.

Notes:

- simply abutting frusta as is often done for pure electrophysiology
  simulations is inadequate

** Deprecated
*** CANCELLED Create a blog post on basic maths terminology           :story:
    CLOSED: [2016-03-14 Mon 11:05]

*Rationale*: Actually it seems ScratchPixel is already a good resource
for this so there is no need to create a post on this.

Now we understood the basics, we should apply the usual Feynman
technique and write a blog post about it.
