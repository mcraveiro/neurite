#+title: Sprint Backlog 05
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission

- Integrate VTK with CGAL
- Create a mesh wit CGAL

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2016-01-11 Mon 16:02]
| <75>                                                                        |         |       |      |
| Headline                                                                    | Time    |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                                | *11:32* |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| Stories                                                                     | 11:32   |       |      |
| Active                                                                      |         | 11:32 |      |
| STARTED Journal club and other activities                                   |         |       | 0:10 |
| COMPLETED Chat with btn                                                     |         |       | 0:41 |
| COMPLETED Get Qt5/VTK6 code to build                                        |         |       | 2:57 |
| COMPLETED Setup new PC                                                      |         |       | 4:42 |
| STARTED Create a geometric representation of ball and stick                 |         |       | 3:02 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:

Updates to sprint and product backlog.

*** STARTED Journal club and other activities                         :story:
    CLOCK: [2016-01-06 Wed 16:34]--[2016-01-06 Wed 16:44] =>  0:10

Time spent in generic tasks.

*** COMPLETED Chat with btn                                           :story:
    CLOSED: [2016-01-06 Wed 16:46]
    CLOCK: [2016-01-06 Wed 15:53]--[2016-01-06 Wed 16:34] =>  0:41

- update on VTK progress
- a couple of suggestions on work to try out.

*** COMPLETED Add support for VTK                                     :story:
    CLOSED: [2016-01-06 Wed 16:49]

We need to get a simple VTK example to compile and run, adding all the
required infrastructure (debian packages, CMake files, etc).

We should create a very simple Qt gui.

*** COMPLETED Get Qt5/VTK6 code to build                              :story:
    CLOSED: [2016-01-06 Wed 16:45]
    CLOCK: [2016-01-05 Tue 17:09]--[2016-01-05 Tue 18:15] =>  1:06
    CLOCK: [2016-01-05 Tue 16:51]--[2016-01-05 Tue 17:08] =>  0:17
    CLOCK: [2016-01-05 Tue 16:34]--[2016-01-05 Tue 16:50] =>  0:16
    CLOCK: [2016-01-05 Tue 15:15]--[2016-01-05 Tue 16:33] =>  1:18

As debian testing now has Qt5 and VTK 6.2, we don't need to build from
source any more. Use the packages to get soma to build and run.

*** COMPLETED Setup new PC                                            :story:
    CLOSED: [2016-01-11 Mon 15:29]
    CLOCK: [2016-01-11 Mon 15:30]--[2016-01-11 Mon 16:01] =>  0:31
    CLOCK: [2016-01-11 Mon 13:50]--[2016-01-11 Mon 15:28] =>  1:38
    CLOCK: [2016-01-08 Fri 14:27]--[2016-01-08 Fri 17:00] =>  2:33

We need to install debian and setup the new box.

Notes:

- problems with NTP. Use systemd according to [[https://wiki.archlinux.org/index.php/systemd-timesyncd][this]] page. However we
  still have problems and cannot connect any of the servers in the
  debian pool. Leave it like this for now.

*** STARTED Create a geometric representation of ball and stick       :story:
    CLOCK: [2016-01-06 Wed 16:45]--[2016-01-06 Wed 17:58] =>  1:13
    CLOCK: [2016-01-06 Wed 14:32]--[2016-01-06 Wed 16:21] =>  1:49

Using VTK, draw the simple SWC file.

*** Parse btmorph's source                                            :story:

We need to understand how btmorph is able to visualise SWC
files. First get it to work, then parse the source.

: apt-get install python-matplotlib python-numpy python-scipy
: git clone https://bitbucket.org/btorb/btmorph.git
: cd btmorph/btmorph
: export PYTHONPATH=$(pwd):$PYTHONPATH
: import btmorph
: import numpy
: import matplotlib.pyplot as plt
: btmorph.plot_2D_SWC("neurite/test_data/swc/ball_and_stick.swc")

Use ipython:

: export PYTHONPATH=$PYTHONPATH:/home/marco/Development/phd/btmorph
: import btmorph
: btmorph.plot_2D_SWC('/home/marco/Development/phd/neurite/test_data/swc/ball_and_stick.swc')
: btmorph.plot_3D_SWC('/home/marco/Development/phd/neurite/test_data/swc/ball_and_stick.swc')

*** Create a blog post on SWC                                         :story:

- describe format
- describe the reconstruction and generative processes

*** Create a geometric representation of the realistic SWC file       :story:

Ensure the code still works on a more complex file format.

*** Create a simple XML based format                                  :story:

- use data from a CGAL/VTK file representing an SWC file.
- compare the size against SWC, using different polygon scales.
- keep in mind large sizes such as 1M
- take into account realistic morphologies such as sourced from EM
  where the number of "compartments" would be extremely large. This
  could be done via scaling (e.g. EM has 1000 more compartments, etc).

*** Add SWC validation support                                        :story:

We need to perform some basic validation on the SWC file. For an
example in python see
[[https://senselab.med.yale.edu/modeldb/ShowModel.cshtml?model%3D168858&file%3D%255CCoskrenEtAl2015%255CHHmodel%255CScripts%255CPython%255Clib%255CSwc.py][this
reader]].

- ID's must be unique.
- parent id's must exist in file.
- there must be one and only one soma.
- there must be one and only one root. Root must be soma?
- types must be well-defined - warning only?
- all nodes must be reachable from root.
- graph must be acyclic

*** Create a presentation on 3D neuronal morphologies                 :story:

We need to explain the processes around it: how do they come about,
what are they used for, existing formats. Actually one way of tackling
this is to create a blog post first and then summarise it in the
presentation.

*** Add support for CGAL                                              :story:

We need to get a simple CGAL example to compile and run, adding all
the required infrastructure (debian packages, CMake files, etc).

*** Add XSD tool support to neurite                                   :story:

Create a simple XSD schema and get it to code generate to C++ using
the [[http://www.codesynthesis.com/products/xsd/][XSD tool]]. This will be used for the XML file format.

*** Start a blog post talking about polygon meshes                    :story:

We don't necessarily need to finish it this sprint but we need to
start collecting all the terminology, etc in a blog post.

*** Create a very simple polygon mesh using CGAL                      :story:

Get the sample from Ben of a very simple model and using the
[[http://doc.cgal.org/latest/Mesh_3/][3D Mesh Generation]]
documentation, try to generate a simple mesh.
** Deprecated
*** CANCELLED Create a VTK setup from github                          :story:
    CLOSED: [2016-01-05 Tue 16:35]

*Rationale*: Recent'ish packages have hit testing so no need to use
the source, luke.

It seems the debian packages are a bit outdated. Build from source.

- [[http://www.vtk.org/Wiki/VTK/Building/Linux][VTK/Building/Linux]]
- [[http://www.vtk.org/Wiki/VTK/Tutorials/QtSetup][VTK/Tutorials/QtSetup]]
- [[https://www.youtube.com/watch?v%3Dsb5FTVGqhPo][Building Qt-enabled VTK applications]]
- [[http://mitk.org/wiki/MITK][The Medical Imaging Interaction Toolkit (MITK)]]
- [[http://docs.mitk.org/2015.05/Architecture.html][MITK Artchitecture]]
- [[http://www.commontk.org/index.php/Main_Page][CTK - The Common Toolkit]]

: sudo apt-get install qtbase5-dev qttools5-dev
: git clone git@github.com:Kitware/VTK.git
: cd VTK
: mkdir build
: cd build
: CMAKE_INCLUDE_PATH=/usr/local/personal/include CMAKE_LIBRARY_PATH=/usr/local/personal/lib cmake -DCMAKE_INSTALL_PREFIX=/home/marco/Development/phd/local -DVTK_QT_VERSION:STRING=5 -DVTK_Group_Qt:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja ..
: cd ~/Development/phd/neurite/build/output/gcc-5/ && CMAKE_INCLUDE_PATH=/usr/local/personal/include:/home/marco/Development/phd/local/include CMAKE_LIBRARY_PATH=/usr/local/personal/lib:/home/marco/Development/phd/local/lib CC=gcc-5 CXX=g++-5 CMAKE_PROGRAM_PATH=/home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc-5/stage/bin VTK_DIR=/home/marco/Development/phd/local/lib/cmake/vtk-6.3/ cmake -DVERBOSE=1 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ../../../ -G Ninja && ninja -j2 soma
: cmake -DVTK_QT_VERSION:STRING=5 -DVTK_Group_Qt:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON -G Ninja ..
