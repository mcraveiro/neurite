#+title: Product Backlog
#+options: date:nil toc:nil author:nil num:nil
#+tags: { story(s) epic(e) }

* Stories

This document contains the product backlog for Neurite.

** In the next few sprints
*** Add version support to soma                                       :story:

We need to know the version and commit of the application on the log file.

*** Fix Qt warnings about TopLevelScreen                              :story:

At present when we exit soma we see loads of these:

: a0xb02190 void QWindowPrivate::setTopLevelScreen(QScreen*, bool) ( QScreen(0xa66d40) ): Attempt to set a screen on a child window.
: 0xc3aec0 void QWindowPrivate::setTopLevelScreen(QScreen*, bool) ( QScreen(0xa66d40) ): Attempt to set a screen on a child window.
: 0xc623c0 void QWindowPrivate::setTopLevelScreen(QScreen*, bool) ( QScreen(0xa66d40) ): Attempt to set a screen on a child window.
: 0xc4de30 void QWindowPrivate::setTopLevelScreen(QScreen*, bool) ( QScreen(0xa66d40) ): Attempt to set a screen on a child window.

Apparently this is due to a bug in Qt:

[[http://stackoverflow.com/questions/33545006/qt5-attempt-to-set-a-screen-on-a-child-window-many-runtime-warning-messages][Qt5 “Attempt to set a screen on a child window” many runtime warning messages]]

*** Add progress bar to soma for operations                           :story:

We should have some way of monitoring SWC loading progress as well as
VTK conversion progress. Find a UI for this.

*** Parse btmorph's source                                            :story:

We need to understand how btmorph is able to visualise SWC
files. First get it to work, then parse the source.

: apt-get install python-matplotlib python-numpy python-scipy
: git clone https://bitbucket.org/btorb/btmorph.git
: cd btmorph/btmorph
: export PYTHONPATH=$(pwd):$PYTHONPATH
: import btmorph
: import numpy
: import matplotlib.pyplot as plt
: btmorph.plot_2D_SWC("neurite/test_data/swc/ball_and_stick.swc")

Use ipython:

: export PYTHONPATH=$PYTHONPATH:/home/marco/Development/phd/btmorph
: import btmorph
: btmorph.plot_2D_SWC('/home/marco/Development/phd/neurite/test_data/swc/ball_and_stick.swc')
: btmorph.plot_3D_SWC('/home/marco/Development/phd/neurite/test_data/swc/ball_and_stick.swc')

*** Add SWC validation support                                        :story:

We need to perform some basic validation on the SWC file. For an
example in python see
[[https://senselab.med.yale.edu/modeldb/ShowModel.cshtml?model%3D168858&file%3D%255CCoskrenEtAl2015%255CHHmodel%255CScripts%255CPython%255Clib%255CSwc.py][this
reader]].

- ID's must be unique.
- parent id's must exist in file, except for root.
- there must be one and only one soma.
- there must be one and only one root. Root must be soma?
- types must be well-defined - warning only?
- all nodes must be reachable from root.
- graph must be acyclic
- errors can trigger exception or be returned as an error list.
- errors should use emacs format and point to line of definition.

*** Create a very simple polygon mesh using CGAL                      :story:

Get the sample from Ben of a very simple model and using the
[[http://doc.cgal.org/latest/Mesh_3/][3D Mesh Generation]]
documentation, try to generate a simple mesh.

*** Create a simple XML based format                                  :story:

- use data from a CGAL/VTK file representing an SWC file.
- compare the size against SWC, using different polygon scales.
- keep in mind large sizes such as 1M
- take into account realistic morphologies such as sourced from EM
  where the number of "compartments" would be extremely large. This
  could be done via scaling (e.g. EM has 1000 more compartments, etc).

*** Create a presentation on 3D neuronal morphologies                 :story:

We need to explain the processes around it: how do they come about,
what are they used for, existing formats. Actually one way of tackling
this is to create a blog post first and then summarise it in the
presentation.

*** Add menu to soma and find file                                    :story:

We need a way to load up different SWC files from the command line.

*** Add XSD tool support to neurite                                   :story:

Create a simple XSD schema and get it to code generate to C++ using
the [[http://www.codesynthesis.com/products/xsd/][XSD tool]]. This will be used for the XML file format.

*** Start a blog post talking about polygon meshes                    :story:

We don't necessarily need to finish it this sprint but we need to
start collecting all the terminology, etc in a blog post.
