Python 3.5.2+ (default, Aug  5 2016, 08:07:14)
[GCC 6.1.1 20160724] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> >>> >>> >>> print 1/6
  File "<stdin>", line 1
    print 1/6
          ^
SyntaxError: Missing parentheses in call to 'print'
>>> print (1/6)
0.16666666666666666
>>> Pr = {1:1/6, 2:1/6, 3:1/6, 4:1/6, 5:1/6, 6:1/6}
>>> print Pr
  File "<stdin>", line 1
    print Pr
           ^
SyntaxError: Missing parentheses in call to 'print'
>>> print (Pr)
{1: 0.16666666666666666, 2: 0.16666666666666666, 3: 0.16666666666666666, 4: 0.16666666666666666, 5: 0.16666666666666666, 6: 0.16666666666666666}
>>> 44 * 5
220
>>> 4**2
16
>>> 5/2
2.5
>>> 5/.2
25.0
>>> 5//2
2
>>> 24 * 60 *6
8640
>>> 24 * 60 *
  File "<stdin>", line 1
    24 * 60 *
             ^
SyntaxError: invalid syntax
>>> 24 * 60
1440
>>> 24 * 60 * 7
10080
>>> 24 * 60 * 60 * 7
604800
>>> 24 * 60 * 60
86400
>>> 24 * 60 * 60 * 7
604800
>>> 24 * 60 * 7
10080
>>> 2304811 // 47
49038
>>> 2304811//47 *47
2304786
>>> 2304811/47
49038.53191489362
>>> 2304811//47
49038
>>> 2304811//47 * 47
2304786
>> >
>>> 2304811 - 2304811//47 * 47
25
>>> mod(2304811, 47(
... )
... )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'mod' is not defined
>>> mod(2304811, 47)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'mod' is not defined
>>> 2304811 % 47
25
>>> 2304811 * 25
57620275
>>> 1e16 + 1
1e+16
>>> 'this sentence'
'this sentence'
>>> "test 'a' "
"test 'a' "
>>> 5 == 4
False
>>> 4 == 4
True
>>> True and False
False
>>> (673 + 909) / 3
527.3333333333334
>>> ((673 + 909) / 3) % 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: float modulo
>>> ((673 + 909) / 3) - (673 + 909) / 3)) == 0
  File "<stdin>", line 1
    ((673 + 909) / 3) - (673 + 909) / 3)) == 0
                                       ^
SyntaxError: invalid syntax
>>> (((673 + 909) / 3) - (673 + 909) / 3))) == 0
  File "<stdin>", line 1
    (((673 + 909) / 3) - (673 + 909) / 3))) == 0
                                         ^
SyntaxError: invalid syntax
>>> ((673 + 909) / 3) - (673 + 909) / 3))
  File "<stdin>", line 1
    ((673 + 909) / 3) - (673 + 909) / 3))
                                       ^
SyntaxError: invalid syntax
>>> ((673 + 909) / 3) - (673 + 909) / 3))
  File "<stdin>", line 1
    ((673 + 909) / 3) - (673 + 909) / 3))
                                       ^
SyntaxError: invalid syntax
>>> (673 + 909) / 3) - (673 + 909) / 3)
  File "<stdin>", line 1
    (673 + 909) / 3) - (673 + 909) / 3)
                   ^
SyntaxError: invalid syntax
>>> ((673 + 909) / 3) - (673 + 909) / 3))
  File "<stdin>", line 1
    ((673 + 909) / 3) - (673 + 909) / 3))
                                       ^
SyntaxError: invalid syntax
>>> ((673 + 909) / 3) - ((673 + 909) / 3)
0.0
>>> ((673 + 909) / 3) - ((673 + 909) / 3) == 0
True
>>> ((673 + 909) % 3 == 0)
False
>>> (673 % 3 == 0)
False
>>> (909 % 3 == 0)
True
>>> a = 4 + 1
>>> print a
  File "<stdin>", line 1
    print a
          ^
SyntaxError: Missing parentheses in call to 'print'
>>> print(a)
5
>>> a
5
>>> a if a > 1 else -a
5
>>> a if a > 6 else -a
-5
>>> a = {1,2,3}
>>> len(a)
3
>>> sum(a)
6
>>> sum(a, 10)
16
>>> 2 in a
True
>>> 4 in a
False
>>> 4 not in a
True
>>> a | {2}
{1, 2, 3}
>>> a | {4}
{1, 2, 3, 4}
>>> a & {4}
set()
>>> a & {2}
{2}
>>> a.update({3,4})
>>> a
{1, 2, 3, 4}
>>> a.update({6,7})
>>> a
{1, 2, 3, 4, 6, 7}
>>> B=a.copy()
>>> B
{1, 2, 3, 4, 6, 7}
>>> B.add(10)
>>> B
{1, 2, 3, 4, 6, 7, 10}
>>> a
{1, 2, 3, 4, 6, 7}
>>> { 2*x for x in a}
{2, 4, 6, 8, 12, 14}
>>> S={1,2,3,4,5}
>>> {x** for x in S}
  File "<stdin>", line 1
    {x** for x in S}
           ^
SyntaxError: invalid syntax
>>> { x** for x in S }
  File "<stdin>", line 1
    { x** for x in S }
            ^
SyntaxError: invalid syntax
>>> { **x for x in S }
  File "<stdin>", line 1
SyntaxError: dict unpacking cannot be used in dict comprehension
>>> { 2x for x in S }
  File "<stdin>", line 1
    { 2x for x in S }
       ^
SyntaxError: invalid syntax
>>> { 2*x for x in S }
{8, 2, 10, 4, 6}
>>> { x**2 for x in S }
{16, 1, 4, 9, 25}
>>> S
{1, 2, 3, 4, 5}
>>> { x**2 for x in S }
{16, 1, 4, 9, 25}
>>> S={0, 1,2,3,4}
>>> { 2**x for x in S}
{8, 1, 2, 4, 16}
>>> { 2**x for x in S|{5,6}}
{32, 1, 2, 64, 4, 8, 16}
>>> { 2**x for x in S|{5,6} if x < 3}
{1, 2, 4}
>>> {for x in {1,2,3} for x in {1,2,3}}
  File "<stdin>", line 1
    {for x in {1,2,3} for x in {1,2,3}}
       ^
SyntaxError: invalid syntax
>>> {x for x in {1,2,3} for x in {1,2,3}}
{1, 2, 3}
>>> {x*y for x in {1,2,3} for x in {1,2,3}}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <setcomp>
NameError: name 'y' is not defined
>>> {x*y for x in {1,2,3} for y in {1,2,3}}

>>> len({1, 2, 3, 4, 6, 9})
6
>>> {x*y for x in {1,2,3} for y in {2,3,4}}
{2, 3, 4, 6, 8, 9, 12}
>>> len({2, 3, 4, 6, 8, 9, 12})
7
>>> {x*y for x in {1,2,3} for y in {3,4,5}}
{3, 4, 5, 6, 8, 9, 10, 12, 15}
>>> len({3, 4, 5, 6, 8, 9, 10, 12, 15})
9
>>> S={1,2,3}
>>> T={2,4,5}
>>> {x for x in S if x in T}
{2}
>>> [1,2,3]
[1, 2, 3]
>>> [4, 1,2,3]
[4, 1, 2, 3]
>>> S=[4, 1,2,3]
>>> [x*2 for x in S]
[8, 2, 4, 6]
>>> L=[20,10,15,75]
>>> sum(L)
120
>>> sum(L)/len(L)
30.0
>>> { x for x in L}
{10, 75, 20, 15}
>>> [ x for x in L]
[20, 10, 15, 75]
>>> [ x for x in [1,2,3] for y in ['A','B','C' ] ]
[1, 1, 1, 2, 2, 2, 3, 3, 3]
>>> [ y for x in [1,2,3] for y in ['A','B','C' ] ]
['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C']
>>> [ x y for x in [1,2,3] for y in ['A','B','C' ] ]
  File "<stdin>", line 1
    [ x y for x in [1,2,3] for y in ['A','B','C' ] ]
        ^
SyntaxError: invalid syntax
>>> [ [x, y] for y in ['A','B','C' ]  for x in [1,2,3] ]
[[1, 'A'], [1, 'B'], [1, 'C'], [2, 'A'], [2, 'B'], [2, 'C'], [3, 'A'], [3, 'B'], [3, 'C']]
>>> [ [y, x] for x in [1,2,3] for y in ['A','B','C' ] ]
[['A', 1], ['B', 1], ['C', 1], ['A', 2], ['B', 2], ['C', 2], ['A', 3], ['B', 3], ['C', 3]]
>>> [ [x, y] for y in ['A','B','C' ]  for x in [1,2,3] ]
[[1, 'A'], [2, 'A'], [3, 'A'], [1, 'B'], [2, 'B'], [3, 'B'], [1, 'C'], [2, 'C'], [3, 'C']]
>>> [ [y, x] for y in ['A','B','C' ]  for x in [1,2,3] ]
[['A', 1], ['A', 2], ['A', 3], ['B', 1], ['B', 2], ['B', 3], ['C', 1], ['C', 2], ['C', 3]]
>>> LofL = [[.25, .75, .1], [-1, 0], [4, 4, 4, 4]]
>>> [ x for x in LofL for y in x ]
[[0.25, 0.75, 0.1], [0.25, 0.75, 0.1], [0.25, 0.75, 0.1], [-1, 0], [-1, 0], [4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4]]
>>> [ y for x in LofL for y in x ]
[0.25, 0.75, 0.1, -1, 0, 4, 4, 4, 4]
>>> sum([ y for x in LofL for y in x ])
16.1
>>> sum([ sum(x) for x in LofL ])
16.1
>>> sum([ sum(x) for x in LofL ])[1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'float' object is not subscriptable
>>> [ sum(x) for x in LofL ])[1]
  File "<stdin>", line 1
    [ sum(x) for x in LofL ])[1]
                            ^
SyntaxError: invalid syntax
>>> [ sum(x) for x in LofL ][1]
-1
>>> [ sum(x) for x in LofL ][0]
1.1
>>> L=[0.25, 0.75, 0.1, -1, 0, 4, 4, 4, 4]
>>> L[0]
0.25
>>> L[0:2]
[0.25, 0.75]
>>> L[:2]
[0.25, 0.75]
>>> L[2:]
[0.1, -1, 0, 4, 4, 4, 4]
>>> L[::2]
[0.25, 0.1, 0, 4, 4]
>>> [x,y]=[0.25, 0.75]
>>> x
0.25
>>> y
0.75
>>> [x,y,z]=[0.25, 0.75]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 3, got 2)
>>> L=[[1, 'A'], [1, 'B'], [1, 'C'], [2, 'A'], [2, 'B'], [2, 'C'], [3, 'A'], [3, 'B'], [3, 'C']]
>>> [ x for [x, y] in L]
[1, 1, 1, 2, 2, 2, 3, 3, 3]
>>> [ y for [x, y] in L]
['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C']
>>> { y for [x, y] in L}
{'A', 'B', 'C'}
>>> L[0]=100
>>> L
[100, [1, 'B'], [1, 'C'], [2, 'A'], [2, 'B'], [2, 'C'], [3, 'A'], [3, 'B'], [3, 'C']]
>>> S={-4,-2,1,2,5,0}
>>> [ (x,y,z) for x in S for y in S for z in S]
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 5), (0, 0, -4), (0, 0, -2), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 5), (0, 1, -4), (0, 1, -2), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 5), (0, 2, -4), (0, 2, -2), (0, 5, 0), (0, 5, 1), (0, 5, 2), (0, 5, 5), (0, 5, -4), (0, 5, -2), (0, -4, 0), (0, -4, 1), (0, -4, 2), (0, -4, 5), (0, -4, -4), (0, -4, -2), (0, -2, 0), (0, -2, 1), (0, -2, 2), (0, -2, 5), (0, -2, -4), (0, -2, -2), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 5), (1, 0, -4), (1, 0, -2), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 5), (1, 1, -4), (1, 1, -2), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 5), (1, 2, -4), (1, 2, -2), (1, 5, 0), (1, 5, 1), (1, 5, 2), (1, 5, 5), (1, 5, -4), (1, 5, -2), (1, -4, 0), (1, -4, 1), (1, -4, 2), (1, -4, 5), (1, -4, -4), (1, -4, -2), (1, -2, 0), (1, -2, 1), (1, -2, 2), (1, -2, 5), (1, -2, -4), (1, -2, -2), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 5), (2, 0, -4), (2, 0, -2), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 5), (2, 1, -4), (2, 1, -2), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 5), (2, 2, -4), (2, 2, -2), (2, 5, 0), (2, 5, 1), (2, 5, 2), (2, 5, 5), (2, 5, -4), (2, 5, -2), (2, -4, 0), (2, -4, 1), (2, -4, 2), (2, -4, 5), (2, -4, -4), (2, -4, -2), (2, -2, 0), (2, -2, 1), (2, -2, 2), (2, -2, 5), (2, -2, -4), (2, -2, -2), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 5), (5, 0, -4), (5, 0, -2), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 5), (5, 1, -4), (5, 1, -2), (5, 2, 0), (5, 2, 1), (5, 2, 2), (5, 2, 5), (5, 2, -4), (5, 2, -2), (5, 5, 0), (5, 5, 1), (5, 5, 2), (5, 5, 5), (5, 5, -4), (5, 5, -2), (5, -4, 0), (5, -4, 1), (5, -4, 2), (5, -4, 5), (5, -4, -4), (5, -4, -2), (5, -2, 0), (5, -2, 1), (5, -2, 2), (5, -2, 5), (5, -2, -4), (5, -2, -2), (-4, 0, 0), (-4, 0, 1), (-4, 0, 2), (-4, 0, 5), (-4, 0, -4), (-4, 0, -2), (-4, 1, 0), (-4, 1, 1), (-4, 1, 2), (-4, 1, 5), (-4, 1, -4), (-4, 1, -2), (-4, 2, 0), (-4, 2, 1), (-4, 2, 2), (-4, 2, 5), (-4, 2, -4), (-4, 2, -2), (-4, 5, 0), (-4, 5, 1), (-4, 5, 2), (-4, 5, 5), (-4, 5, -4), (-4, 5, -2), (-4, -4, 0), (-4, -4, 1), (-4, -4, 2), (-4, -4, 5), (-4, -4, -4), (-4, -4, -2), (-4, -2, 0), (-4, -2, 1), (-4, -2, 2), (-4, -2, 5), (-4, -2, -4), (-4, -2, -2), (-2, 0, 0), (-2, 0, 1), (-2, 0, 2), (-2, 0, 5), (-2, 0, -4), (-2, 0, -2), (-2, 1, 0), (-2, 1, 1), (-2, 1, 2), (-2, 1, 5), (-2, 1, -4), (-2, 1, -2), (-2, 2, 0), (-2, 2, 1), (-2, 2, 2), (-2, 2, 5), (-2, 2, -4), (-2, 2, -2), (-2, 5, 0), (-2, 5, 1), (-2, 5, 2), (-2, 5, 5), (-2, 5, -4), (-2, 5, -2), (-2, -4, 0), (-2, -4, 1), (-2, -4, 2), (-2, -4, 5), (-2, -4, -4), (-2, -4, -2), (-2, -2, 0), (-2, -2, 1), (-2, -2, 2), (-2, -2, 5), (-2, -2, -4), (-2, -2, -2)]
>>> len([ (x,y,z) for x in S for y in S for z in S])
216
>>> len([ (x,y,z) for x in S for y in S for z in S if x - y - z =0])
  File "<stdin>", line 1
    len([ (x,y,z) for x in S for y in S for z in S if x - y - z =0])
                                                                ^
SyntaxError: invalid syntax
>>> len([ (x,y,z) for x in S for y in S for z in S if x - y - z == 0])
19
>>> [ (x,y,z) for x in S for y in S for z in S if x + y + z == 0]
[(0, 0, 0), (0, 2, -2), (0, -2, 2), (1, 0, 1), (1, 1, 0), (1, 5, -4), (1, -4, 5), (2, 0, 2), (2, 1, 1), (2, 2, 0), (5, 0, 5), (5, 5, 0), (-4, 0, -4), (-4, -4, 0), (-4, -2, -2), (-2, 0, -2), (-2, 2, -4), (-2, -4, 2), (-2, -2, 0)]
>>> [ (x,y,z) for x in S for y in S for z in S if x + y + z == 0]
[(0, 0, 0), (0, 2, -2), (0, -2, 2), (1, 1, -2), (1, -2, 1), (2, 0, -2), (2, 2, -4), (2, -4, 2), (2, -2, 0), (-4, 2, 2), (-2, 0, 2), (-2, 1, 1), (-2, 2, 0)]
>>> [ (x,y,z) for x in S for y in S for z in S if x + y + z == 0 if x != 0 and y != 0 and z != 0]
[(1, 1, -2), (1, -2, 1), (2, 2, -4), (2, -4, 2), (-4, 2, 2), (-2, 1, 1)]
>>> [ (x,y,z) for x in S for y in S for z in S if x + y + z == 0 if x != 0 and y != 0 and z != 0][0]
(1, 1, -2)
>>> range(10)
range(0, 10)
>>> A=range(10)
>>> A
range(0, 10)
>>> A=range(0, 10)
>>> A
range(0, 10)
>>> [ x for x in range(10)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> tuple(range(0, 10))
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
>>> { x for x in (range(100))}
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99}
>>> zip(range(5),range(5))
<zip object at 0x7f135d7380c8>
>>> {zip(range(5),range(5))}
{<zip object at 0x7f135d753248>}
>>> list(zip(range(5),range(5)))
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]
>>> list(range('D'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object cannot be interpreted as an integer
>>> char(65)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'char' is not defined
>>> chr(65)
'A'
>>> [ chr(x) for x in 65 + range(5) ]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'range'
>>> [ chr(x) for x in range(65, 5) ]
[]
>>> list(range(65, 5))
[]
>>> list(range(65, 70))
[65, 66, 67, 68, 69]
>>> [ chr(x) for x in range(65, 70) ]
['A', 'B', 'C', 'D', 'E']
>>> L=[ chr(x) for x in range(65, 70) ]
>>> L
['A', 'B', 'C', 'D', 'E']
>>> list(zip(L, range(5)))
[('A', 0), ('B', 1), ('C', 2), ('D', 3), ('E', 4)]
>>> list(zip(range(5), L))
[(0, 'A'), (1, 'B'), (2, 'C'), (3, 'D'), (4, 'E')]
>>> list(zip([10,25,40],[1,15,20])
... )
[(10, 1), (25, 15), (40, 20)]
>>> list(zip([10,25,40],[1,15,20]))
[(10, 1), (25, 15), (40, 20)]
>>> [ x + y x, y = zip([10,25,40],[1,15,20]))
  File "<stdin>", line 1
    [ x + y x, y = zip([10,25,40],[1,15,20]))
            ^
SyntaxError: invalid syntax
>>> x, y = zip([10,25,40],[1,15,20])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: too many values to unpack (expected 2)
>>> zip([10,25,40],[1,15,20])
<zip object at 0x7f135d753348>
>>> [ (x, y) for x, y in zip([10,25,40],[1,15,20])]
[(10, 1), (25, 15), (40, 20)]
>>> [ x+y for x, y in zip([10,25,40],[1,15,20])]
[11, 40, 60]
>>> reversed([ x+y for x, y in zip([10,25,40],[1,15,20])])
<list_reverseiterator object at 0x7f135d737240>
>>> [ x+y for x, y in reversed(zip([10,25,40],[1,15,20]))]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: argument to reversed() must be a sequence
>>> [ x+y for x, y in zip(reversed([10,25,40]),[1,15,20]))]
  File "<stdin>", line 1
    [ x+y for x, y in zip(reversed([10,25,40]),[1,15,20]))]
                                                         ^
SyntaxError: invalid syntax
>>> [ x+y for x, y in zip(reversed([10,25,40]),[1,15,20])]
[41, 40, 30]
>>> {'A':0}
{'A': 0}
>>> {'A':0, 'B':1}
{'A': 0, 'B': 1}
>>> D={'A':0, 'B':1}
>>> D['A']
0
>>> D['B']
1
>>> 'A' in D
True
>>> D['B']=2
>>> D
{'A': 0, 'B': 2}
>>> D['C'] = {1,2}
>>> D
{'A': 0, 'B': 2, 'C': {1, 2}}
>>> { k:v for k, v in zip([chr(x) for x in range(65, 5)], list(range(5))) }
{}
>>> { k:v for (k, v) in zip([chr(x) for x in range(65, 5)], list(range(5))) }
{}
>>> [ for (k, v) in zip([chr(x) for x in range(65, 5)], list(range(5))) ]
  File "<stdin>", line 1
    [ for (k, v) in zip([chr(x) for x in range(65, 5)], list(range(5))) ]
        ^
SyntaxError: invalid syntax
>>> [ for (k, v) in list(zip([chr(x) for x in range(65, 5)], list(range(5)))) ]
  File "<stdin>", line 1
    [ for (k, v) in list(zip([chr(x) for x in range(65, 5)], list(range(5)))) ]
        ^
SyntaxError: invalid syntax
>>> [ for k, v in list(zip([chr(x) for x in range(65, 5)], list(range(5)))) ]
  File "<stdin>", line 1
    [ for k, v in list(zip([chr(x) for x in range(65, 5)], list(range(5)))) ]
        ^
SyntaxError: invalid syntax
>>> list(zip([chr(x) for x in range(65, 5)], list(range(5))))
[]
>>> list(zip([chr(x) for x in range(65, 70)], list(range(5))))
[('A', 0), ('B', 1), ('C', 2), ('D', 3), ('E', 4)]
>>> [ for k, v in zip([chr(x) for x in range(65, 5)], list(range(5))) ]
  File "<stdin>", line 1
    [ for k, v in zip([chr(x) for x in range(65, 5)], list(range(5))) ]
        ^
SyntaxError: invalid syntax
>>> [ for (k, v) in zip([chr(x) for x in range(65, 5)], list(range(5))) ]
  File "<stdin>", line 1
    [ for (k, v) in zip([chr(x) for x in range(65, 5)], list(range(5))) ]
        ^
SyntaxError: invalid syntax
>>> [ k for (k, v) in zip([chr(x) for x in range(65, 5)], list(range(5))) ]
[]
>>> [ k for (k, v) in zip([chr(x) for x in range(65, 70)], list(range(5))) ]
['A', 'B', 'C', 'D', 'E']
>>> { k:v for (k, v) in zip([chr(x) for x in range(65, 70)], list(range(5))) }
{'A': 0, 'E': 4, 'D': 3, 'B': 1, 'C': 2}
>>> { k:k*k for k in range(100) }
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361, 20: 400, 21: 441, 22: 484, 23: 529, 24: 576, 25: 625, 26: 676, 27: 729, 28: 784, 29: 841, 30: 900, 31: 961, 32: 1024, 33: 1089, 34: 1156, 35: 1225, 36: 1296, 37: 1369, 38: 1444, 39: 1521, 40: 1600, 41: 1681, 42: 1764, 43: 1849, 44: 1936, 45: 2025, 46: 2116, 47: 2209, 48: 2304, 49: 2401, 50: 2500, 51: 2601, 52: 2704, 53: 2809, 54: 2916, 55: 3025, 56: 3136, 57: 3249, 58: 3364, 59: 3481, 60: 3600, 61: 3721, 62: 3844, 63: 3969, 64: 4096, 65: 4225, 66: 4356, 67: 4489, 68: 4624, 69: 4761, 70: 4900, 71: 5041, 72: 5184, 73: 5329, 74: 5476, 75: 5625, 76: 5776, 77: 5929, 78: 6084, 79: 6241, 80: 6400, 81: 6561, 82: 6724, 83: 6889, 84: 7056, 85: 7225, 86: 7396, 87: 7569, 88: 7744, 89: 7921, 90: 8100, 91: 8281, 92: 8464, 93: 8649, 94: 8836, 95: 9025, 96: 9216, 97: 9409, 98: 9604, 99: 9801}
>>> 256**2
65536
>>> D={'red','white','blue'}
>>> { k:k for k in D}
{'blue': 'blue', 'red': 'red', 'white': 'white'}
>>> k['white']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'k' is not defined
>>> D['white']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object is not subscriptable
>>> D={'blue': 'blue', 'red': 'red', 'white': 'white'}
>>> D['white']
'white'
>>> base=10
>>> digits=set(range(base))
>>> digits
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
>>> [ x for x in (range(10))]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> representation_dict = {i:(i//base//base,i//base%base,i%base) for i in range(base*base*base) }
>>> representation_dict
{0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 0, 2), 3: (0, 0, 3), 4: (0, 0, 4), 5: (0, 0, 5), 6: (0, 0, 6), 7: (0, 0, 7), 8: (0, 0, 8), 9: (0, 0, 9), 10: (0, 1, 0), 11: (0, 1, 1), 12: (0, 1, 2), 13: (0, 1, 3), 14: (0, 1, 4), 15: (0, 1, 5), 16: (0, 1, 6), 17: (0, 1, 7), 18: (0, 1, 8), 19: (0, 1, 9), 20: (0, 2, 0), 21: (0, 2, 1), 22: (0, 2, 2), 23: (0, 2, 3), 24: (0, 2, 4), 25: (0, 2, 5), 26: (0, 2, 6), 27: (0, 2, 7), 28: (0, 2, 8), 29: (0, 2, 9), 30: (0, 3, 0), 31: (0, 3, 1), 32: (0, 3, 2), 33: (0, 3, 3), 34: (0, 3, 4), 35: (0, 3, 5), 36: (0, 3, 6), 37: (0, 3, 7), 38: (0, 3, 8), 39: (0, 3, 9), 40: (0, 4, 0), 41: (0, 4, 1), 42: (0, 4, 2), 43: (0, 4, 3), 44: (0, 4, 4), 45: (0, 4, 5), 46: (0, 4, 6), 47: (0, 4, 7), 48: (0, 4, 8), 49: (0, 4, 9), 50: (0, 5, 0), 51: (0, 5, 1), 52: (0, 5, 2), 53: (0, 5, 3), 54: (0, 5, 4), 55: (0, 5, 5), 56: (0, 5, 6), 57: (0, 5, 7), 58: (0, 5, 8), 59: (0, 5, 9), 60: (0, 6, 0), 61: (0, 6, 1), 62: (0, 6, 2), 63: (0, 6, 3), 64: (0, 6, 4), 65: (0, 6, 5), 66: (0, 6, 6), 67: (0, 6, 7), 68: (0, 6, 8), 69: (0, 6, 9), 70: (0, 7, 0), 71: (0, 7, 1), 72: (0, 7, 2), 73: (0, 7, 3), 74: (0, 7, 4), 75: (0, 7, 5), 76: (0, 7, 6), 77: (0, 7, 7), 78: (0, 7, 8), 79: (0, 7, 9), 80: (0, 8, 0), 81: (0, 8, 1), 82: (0, 8, 2), 83: (0, 8, 3), 84: (0, 8, 4), 85: (0, 8, 5), 86: (0, 8, 6), 87: (0, 8, 7), 88: (0, 8, 8), 89: (0, 8, 9), 90: (0, 9, 0), 91: (0, 9, 1), 92: (0, 9, 2), 93: (0, 9, 3), 94: (0, 9, 4), 95: (0, 9, 5), 96: (0, 9, 6), 97: (0, 9, 7), 98: (0, 9, 8), 99: (0, 9, 9), 100: (1, 0, 0), 101: (1, 0, 1), 102: (1, 0, 2), 103: (1, 0, 3), 104: (1, 0, 4), 105: (1, 0, 5), 106: (1, 0, 6), 107: (1, 0, 7), 108: (1, 0, 8), 109: (1, 0, 9), 110: (1, 1, 0), 111: (1, 1, 1), 112: (1, 1, 2), 113: (1, 1, 3), 114: (1, 1, 4), 115: (1, 1, 5), 116: (1, 1, 6), 117: (1, 1, 7), 118: (1, 1, 8), 119: (1, 1, 9), 120: (1, 2, 0), 121: (1, 2, 1), 122: (1, 2, 2), 123: (1, 2, 3), 124: (1, 2, 4), 125: (1, 2, 5), 126: (1, 2, 6), 127: (1, 2, 7), 128: (1, 2, 8), 129: (1, 2, 9), 130: (1, 3, 0), 131: (1, 3, 1), 132: (1, 3, 2), 133: (1, 3, 3), 134: (1, 3, 4), 135: (1, 3, 5), 136: (1, 3, 6), 137: (1, 3, 7), 138: (1, 3, 8), 139: (1, 3, 9), 140: (1, 4, 0), 141: (1, 4, 1), 142: (1, 4, 2), 143: (1, 4, 3), 144: (1, 4, 4), 145: (1, 4, 5), 146: (1, 4, 6), 147: (1, 4, 7), 148: (1, 4, 8), 149: (1, 4, 9), 150: (1, 5, 0), 151: (1, 5, 1), 152: (1, 5, 2), 153: (1, 5, 3), 154: (1, 5, 4), 155: (1, 5, 5), 156: (1, 5, 6), 157: (1, 5, 7), 158: (1, 5, 8), 159: (1, 5, 9), 160: (1, 6, 0), 161: (1, 6, 1), 162: (1, 6, 2), 163: (1, 6, 3), 164: (1, 6, 4), 165: (1, 6, 5), 166: (1, 6, 6), 167: (1, 6, 7), 168: (1, 6, 8), 169: (1, 6, 9), 170: (1, 7, 0), 171: (1, 7, 1), 172: (1, 7, 2), 173: (1, 7, 3), 174: (1, 7, 4), 175: (1, 7, 5), 176: (1, 7, 6), 177: (1, 7, 7), 178: (1, 7, 8), 179: (1, 7, 9), 180: (1, 8, 0), 181: (1, 8, 1), 182: (1, 8, 2), 183: (1, 8, 3), 184: (1, 8, 4), 185: (1, 8, 5), 186: (1, 8, 6), 187: (1, 8, 7), 188: (1, 8, 8), 189: (1, 8, 9), 190: (1, 9, 0), 191: (1, 9, 1), 192: (1, 9, 2), 193: (1, 9, 3), 194: (1, 9, 4), 195: (1, 9, 5), 196: (1, 9, 6), 197: (1, 9, 7), 198: (1, 9, 8), 199: (1, 9, 9), 200: (2, 0, 0), 201: (2, 0, 1), 202: (2, 0, 2), 203: (2, 0, 3), 204: (2, 0, 4), 205: (2, 0, 5), 206: (2, 0, 6), 207: (2, 0, 7), 208: (2, 0, 8), 209: (2, 0, 9), 210: (2, 1, 0), 211: (2, 1, 1), 212: (2, 1, 2), 213: (2, 1, 3), 214: (2, 1, 4), 215: (2, 1, 5), 216: (2, 1, 6), 217: (2, 1, 7), 218: (2, 1, 8), 219: (2, 1, 9), 220: (2, 2, 0), 221: (2, 2, 1), 222: (2, 2, 2), 223: (2, 2, 3), 224: (2, 2, 4), 225: (2, 2, 5), 226: (2, 2, 6), 227: (2, 2, 7), 228: (2, 2, 8), 229: (2, 2, 9), 230: (2, 3, 0), 231: (2, 3, 1), 232: (2, 3, 2), 233: (2, 3, 3), 234: (2, 3, 4), 235: (2, 3, 5), 236: (2, 3, 6), 237: (2, 3, 7), 238: (2, 3, 8), 239: (2, 3, 9), 240: (2, 4, 0), 241: (2, 4, 1), 242: (2, 4, 2), 243: (2, 4, 3), 244: (2, 4, 4), 245: (2, 4, 5), 246: (2, 4, 6), 247: (2, 4, 7), 248: (2, 4, 8), 249: (2, 4, 9), 250: (2, 5, 0), 251: (2, 5, 1), 252: (2, 5, 2), 253: (2, 5, 3), 254: (2, 5, 4), 255: (2, 5, 5), 256: (2, 5, 6), 257: (2, 5, 7), 258: (2, 5, 8), 259: (2, 5, 9), 260: (2, 6, 0), 261: (2, 6, 1), 262: (2, 6, 2), 263: (2, 6, 3), 264: (2, 6, 4), 265: (2, 6, 5), 266: (2, 6, 6), 267: (2, 6, 7), 268: (2, 6, 8), 269: (2, 6, 9), 270: (2, 7, 0), 271: (2, 7, 1), 272: (2, 7, 2), 273: (2, 7, 3), 274: (2, 7, 4), 275: (2, 7, 5), 276: (2, 7, 6), 277: (2, 7, 7), 278: (2, 7, 8), 279: (2, 7, 9), 280: (2, 8, 0), 281: (2, 8, 1), 282: (2, 8, 2), 283: (2, 8, 3), 284: (2, 8, 4), 285: (2, 8, 5), 286: (2, 8, 6), 287: (2, 8, 7), 288: (2, 8, 8), 289: (2, 8, 9), 290: (2, 9, 0), 291: (2, 9, 1), 292: (2, 9, 2), 293: (2, 9, 3), 294: (2, 9, 4), 295: (2, 9, 5), 296: (2, 9, 6), 297: (2, 9, 7), 298: (2, 9, 8), 299: (2, 9, 9), 300: (3, 0, 0), 301: (3, 0, 1), 302: (3, 0, 2), 303: (3, 0, 3), 304: (3, 0, 4), 305: (3, 0, 5), 306: (3, 0, 6), 307: (3, 0, 7), 308: (3, 0, 8), 309: (3, 0, 9), 310: (3, 1, 0), 311: (3, 1, 1), 312: (3, 1, 2), 313: (3, 1, 3), 314: (3, 1, 4), 315: (3, 1, 5), 316: (3, 1, 6), 317: (3, 1, 7), 318: (3, 1, 8), 319: (3, 1, 9), 320: (3, 2, 0), 321: (3, 2, 1), 322: (3, 2, 2), 323: (3, 2, 3), 324: (3, 2, 4), 325: (3, 2, 5), 326: (3, 2, 6), 327: (3, 2, 7), 328: (3, 2, 8), 329: (3, 2, 9), 330: (3, 3, 0), 331: (3, 3, 1), 332: (3, 3, 2), 333: (3, 3, 3), 334: (3, 3, 4), 335: (3, 3, 5), 336: (3, 3, 6), 337: (3, 3, 7), 338: (3, 3, 8), 339: (3, 3, 9), 340: (3, 4, 0), 341: (3, 4, 1), 342: (3, 4, 2), 343: (3, 4, 3), 344: (3, 4, 4), 345: (3, 4, 5), 346: (3, 4, 6), 347: (3, 4, 7), 348: (3, 4, 8), 349: (3, 4, 9), 350: (3, 5, 0), 351: (3, 5, 1), 352: (3, 5, 2), 353: (3, 5, 3), 354: (3, 5, 4), 355: (3, 5, 5), 356: (3, 5, 6), 357: (3, 5, 7), 358: (3, 5, 8), 359: (3, 5, 9), 360: (3, 6, 0), 361: (3, 6, 1), 362: (3, 6, 2), 363: (3, 6, 3), 364: (3, 6, 4), 365: (3, 6, 5), 366: (3, 6, 6), 367: (3, 6, 7), 368: (3, 6, 8), 369: (3, 6, 9), 370: (3, 7, 0), 371: (3, 7, 1), 372: (3, 7, 2), 373: (3, 7, 3), 374: (3, 7, 4), 375: (3, 7, 5), 376: (3, 7, 6), 377: (3, 7, 7), 378: (3, 7, 8), 379: (3, 7, 9), 380: (3, 8, 0), 381: (3, 8, 1), 382: (3, 8, 2), 383: (3, 8, 3), 384: (3, 8, 4), 385: (3, 8, 5), 386: (3, 8, 6), 387: (3, 8, 7), 388: (3, 8, 8), 389: (3, 8, 9), 390: (3, 9, 0), 391: (3, 9, 1), 392: (3, 9, 2), 393: (3, 9, 3), 394: (3, 9, 4), 395: (3, 9, 5), 396: (3, 9, 6), 397: (3, 9, 7), 398: (3, 9, 8), 399: (3, 9, 9), 400: (4, 0, 0), 401: (4, 0, 1), 402: (4, 0, 2), 403: (4, 0, 3), 404: (4, 0, 4), 405: (4, 0, 5), 406: (4, 0, 6), 407: (4, 0, 7), 408: (4, 0, 8), 409: (4, 0, 9), 410: (4, 1, 0), 411: (4, 1, 1), 412: (4, 1, 2), 413: (4, 1, 3), 414: (4, 1, 4), 415: (4, 1, 5), 416: (4, 1, 6), 417: (4, 1, 7), 418: (4, 1, 8), 419: (4, 1, 9), 420: (4, 2, 0), 421: (4, 2, 1), 422: (4, 2, 2), 423: (4, 2, 3), 424: (4, 2, 4), 425: (4, 2, 5), 426: (4, 2, 6), 427: (4, 2, 7), 428: (4, 2, 8), 429: (4, 2, 9), 430: (4, 3, 0), 431: (4, 3, 1), 432: (4, 3, 2), 433: (4, 3, 3), 434: (4, 3, 4), 435: (4, 3, 5), 436: (4, 3, 6), 437: (4, 3, 7), 438: (4, 3, 8), 439: (4, 3, 9), 440: (4, 4, 0), 441: (4, 4, 1), 442: (4, 4, 2), 443: (4, 4, 3), 444: (4, 4, 4), 445: (4, 4, 5), 446: (4, 4, 6), 447: (4, 4, 7), 448: (4, 4, 8), 449: (4, 4, 9), 450: (4, 5, 0), 451: (4, 5, 1), 452: (4, 5, 2), 453: (4, 5, 3), 454: (4, 5, 4), 455: (4, 5, 5), 456: (4, 5, 6), 457: (4, 5, 7), 458: (4, 5, 8), 459: (4, 5, 9), 460: (4, 6, 0), 461: (4, 6, 1), 462: (4, 6, 2), 463: (4, 6, 3), 464: (4, 6, 4), 465: (4, 6, 5), 466: (4, 6, 6), 467: (4, 6, 7), 468: (4, 6, 8), 469: (4, 6, 9), 470: (4, 7, 0), 471: (4, 7, 1), 472: (4, 7, 2), 473: (4, 7, 3), 474: (4, 7, 4), 475: (4, 7, 5), 476: (4, 7, 6), 477: (4, 7, 7), 478: (4, 7, 8), 479: (4, 7, 9), 480: (4, 8, 0), 481: (4, 8, 1), 482: (4, 8, 2), 483: (4, 8, 3), 484: (4, 8, 4), 485: (4, 8, 5), 486: (4, 8, 6), 487: (4, 8, 7), 488: (4, 8, 8), 489: (4, 8, 9), 490: (4, 9, 0), 491: (4, 9, 1), 492: (4, 9, 2), 493: (4, 9, 3), 494: (4, 9, 4), 495: (4, 9, 5), 496: (4, 9, 6), 497: (4, 9, 7), 498: (4, 9, 8), 499: (4, 9, 9), 500: (5, 0, 0), 501: (5, 0, 1), 502: (5, 0, 2), 503: (5, 0, 3), 504: (5, 0, 4), 505: (5, 0, 5), 506: (5, 0, 6), 507: (5, 0, 7), 508: (5, 0, 8), 509: (5, 0, 9), 510: (5, 1, 0), 511: (5, 1, 1), 512: (5, 1, 2), 513: (5, 1, 3), 514: (5, 1, 4), 515: (5, 1, 5), 516: (5, 1, 6), 517: (5, 1, 7), 518: (5, 1, 8), 519: (5, 1, 9), 520: (5, 2, 0), 521: (5, 2, 1), 522: (5, 2, 2), 523: (5, 2, 3), 524: (5, 2, 4), 525: (5, 2, 5), 526: (5, 2, 6), 527: (5, 2, 7), 528: (5, 2, 8), 529: (5, 2, 9), 530: (5, 3, 0), 531: (5, 3, 1), 532: (5, 3, 2), 533: (5, 3, 3), 534: (5, 3, 4), 535: (5, 3, 5), 536: (5, 3, 6), 537: (5, 3, 7), 538: (5, 3, 8), 539: (5, 3, 9), 540: (5, 4, 0), 541: (5, 4, 1), 542: (5, 4, 2), 543: (5, 4, 3), 544: (5, 4, 4), 545: (5, 4, 5), 546: (5, 4, 6), 547: (5, 4, 7), 548: (5, 4, 8), 549: (5, 4, 9), 550: (5, 5, 0), 551: (5, 5, 1), 552: (5, 5, 2), 553: (5, 5, 3), 554: (5, 5, 4), 555: (5, 5, 5), 556: (5, 5, 6), 557: (5, 5, 7), 558: (5, 5, 8), 559: (5, 5, 9), 560: (5, 6, 0), 561: (5, 6, 1), 562: (5, 6, 2), 563: (5, 6, 3), 564: (5, 6, 4), 565: (5, 6, 5), 566: (5, 6, 6), 567: (5, 6, 7), 568: (5, 6, 8), 569: (5, 6, 9), 570: (5, 7, 0), 571: (5, 7, 1), 572: (5, 7, 2), 573: (5, 7, 3), 574: (5, 7, 4), 575: (5, 7, 5), 576: (5, 7, 6), 577: (5, 7, 7), 578: (5, 7, 8), 579: (5, 7, 9), 580: (5, 8, 0), 581: (5, 8, 1), 582: (5, 8, 2), 583: (5, 8, 3), 584: (5, 8, 4), 585: (5, 8, 5), 586: (5, 8, 6), 587: (5, 8, 7), 588: (5, 8, 8), 589: (5, 8, 9), 590: (5, 9, 0), 591: (5, 9, 1), 592: (5, 9, 2), 593: (5, 9, 3), 594: (5, 9, 4), 595: (5, 9, 5), 596: (5, 9, 6), 597: (5, 9, 7), 598: (5, 9, 8), 599: (5, 9, 9), 600: (6, 0, 0), 601: (6, 0, 1), 602: (6, 0, 2), 603: (6, 0, 3), 604: (6, 0, 4), 605: (6, 0, 5), 606: (6, 0, 6), 607: (6, 0, 7), 608: (6, 0, 8), 609: (6, 0, 9), 610: (6, 1, 0), 611: (6, 1, 1), 612: (6, 1, 2), 613: (6, 1, 3), 614: (6, 1, 4), 615: (6, 1, 5), 616: (6, 1, 6), 617: (6, 1, 7), 618: (6, 1, 8), 619: (6, 1, 9), 620: (6, 2, 0), 621: (6, 2, 1), 622: (6, 2, 2), 623: (6, 2, 3), 624: (6, 2, 4), 625: (6, 2, 5), 626: (6, 2, 6), 627: (6, 2, 7), 628: (6, 2, 8), 629: (6, 2, 9), 630: (6, 3, 0), 631: (6, 3, 1), 632: (6, 3, 2), 633: (6, 3, 3), 634: (6, 3, 4), 635: (6, 3, 5), 636: (6, 3, 6), 637: (6, 3, 7), 638: (6, 3, 8), 639: (6, 3, 9), 640: (6, 4, 0), 641: (6, 4, 1), 642: (6, 4, 2), 643: (6, 4, 3), 644: (6, 4, 4), 645: (6, 4, 5), 646: (6, 4, 6), 647: (6, 4, 7), 648: (6, 4, 8), 649: (6, 4, 9), 650: (6, 5, 0), 651: (6, 5, 1), 652: (6, 5, 2), 653: (6, 5, 3), 654: (6, 5, 4), 655: (6, 5, 5), 656: (6, 5, 6), 657: (6, 5, 7), 658: (6, 5, 8), 659: (6, 5, 9), 660: (6, 6, 0), 661: (6, 6, 1), 662: (6, 6, 2), 663: (6, 6, 3), 664: (6, 6, 4), 665: (6, 6, 5), 666: (6, 6, 6), 667: (6, 6, 7), 668: (6, 6, 8), 669: (6, 6, 9), 670: (6, 7, 0), 671: (6, 7, 1), 672: (6, 7, 2), 673: (6, 7, 3), 674: (6, 7, 4), 675: (6, 7, 5), 676: (6, 7, 6), 677: (6, 7, 7), 678: (6, 7, 8), 679: (6, 7, 9), 680: (6, 8, 0), 681: (6, 8, 1), 682: (6, 8, 2), 683: (6, 8, 3), 684: (6, 8, 4), 685: (6, 8, 5), 686: (6, 8, 6), 687: (6, 8, 7), 688: (6, 8, 8), 689: (6, 8, 9), 690: (6, 9, 0), 691: (6, 9, 1), 692: (6, 9, 2), 693: (6, 9, 3), 694: (6, 9, 4), 695: (6, 9, 5), 696: (6, 9, 6), 697: (6, 9, 7), 698: (6, 9, 8), 699: (6, 9, 9), 700: (7, 0, 0), 701: (7, 0, 1), 702: (7, 0, 2), 703: (7, 0, 3), 704: (7, 0, 4), 705: (7, 0, 5), 706: (7, 0, 6), 707: (7, 0, 7), 708: (7, 0, 8), 709: (7, 0, 9), 710: (7, 1, 0), 711: (7, 1, 1), 712: (7, 1, 2), 713: (7, 1, 3), 714: (7, 1, 4), 715: (7, 1, 5), 716: (7, 1, 6), 717: (7, 1, 7), 718: (7, 1, 8), 719: (7, 1, 9), 720: (7, 2, 0), 721: (7, 2, 1), 722: (7, 2, 2), 723: (7, 2, 3), 724: (7, 2, 4), 725: (7, 2, 5), 726: (7, 2, 6), 727: (7, 2, 7), 728: (7, 2, 8), 729: (7, 2, 9), 730: (7, 3, 0), 731: (7, 3, 1), 732: (7, 3, 2), 733: (7, 3, 3), 734: (7, 3, 4), 735: (7, 3, 5), 736: (7, 3, 6), 737: (7, 3, 7), 738: (7, 3, 8), 739: (7, 3, 9), 740: (7, 4, 0), 741: (7, 4, 1), 742: (7, 4, 2), 743: (7, 4, 3), 744: (7, 4, 4), 745: (7, 4, 5), 746: (7, 4, 6), 747: (7, 4, 7), 748: (7, 4, 8), 749: (7, 4, 9), 750: (7, 5, 0), 751: (7, 5, 1), 752: (7, 5, 2), 753: (7, 5, 3), 754: (7, 5, 4), 755: (7, 5, 5), 756: (7, 5, 6), 757: (7, 5, 7), 758: (7, 5, 8), 759: (7, 5, 9), 760: (7, 6, 0), 761: (7, 6, 1), 762: (7, 6, 2), 763: (7, 6, 3), 764: (7, 6, 4), 765: (7, 6, 5), 766: (7, 6, 6), 767: (7, 6, 7), 768: (7, 6, 8), 769: (7, 6, 9), 770: (7, 7, 0), 771: (7, 7, 1), 772: (7, 7, 2), 773: (7, 7, 3), 774: (7, 7, 4), 775: (7, 7, 5), 776: (7, 7, 6), 777: (7, 7, 7), 778: (7, 7, 8), 779: (7, 7, 9), 780: (7, 8, 0), 781: (7, 8, 1), 782: (7, 8, 2), 783: (7, 8, 3), 784: (7, 8, 4), 785: (7, 8, 5), 786: (7, 8, 6), 787: (7, 8, 7), 788: (7, 8, 8), 789: (7, 8, 9), 790: (7, 9, 0), 791: (7, 9, 1), 792: (7, 9, 2), 793: (7, 9, 3), 794: (7, 9, 4), 795: (7, 9, 5), 796: (7, 9, 6), 797: (7, 9, 7), 798: (7, 9, 8), 799: (7, 9, 9), 800: (8, 0, 0), 801: (8, 0, 1), 802: (8, 0, 2), 803: (8, 0, 3), 804: (8, 0, 4), 805: (8, 0, 5), 806: (8, 0, 6), 807: (8, 0, 7), 808: (8, 0, 8), 809: (8, 0, 9), 810: (8, 1, 0), 811: (8, 1, 1), 812: (8, 1, 2), 813: (8, 1, 3), 814: (8, 1, 4), 815: (8, 1, 5), 816: (8, 1, 6), 817: (8, 1, 7), 818: (8, 1, 8), 819: (8, 1, 9), 820: (8, 2, 0), 821: (8, 2, 1), 822: (8, 2, 2), 823: (8, 2, 3), 824: (8, 2, 4), 825: (8, 2, 5), 826: (8, 2, 6), 827: (8, 2, 7), 828: (8, 2, 8), 829: (8, 2, 9), 830: (8, 3, 0), 831: (8, 3, 1), 832: (8, 3, 2), 833: (8, 3, 3), 834: (8, 3, 4), 835: (8, 3, 5), 836: (8, 3, 6), 837: (8, 3, 7), 838: (8, 3, 8), 839: (8, 3, 9), 840: (8, 4, 0), 841: (8, 4, 1), 842: (8, 4, 2), 843: (8, 4, 3), 844: (8, 4, 4), 845: (8, 4, 5), 846: (8, 4, 6), 847: (8, 4, 7), 848: (8, 4, 8), 849: (8, 4, 9), 850: (8, 5, 0), 851: (8, 5, 1), 852: (8, 5, 2), 853: (8, 5, 3), 854: (8, 5, 4), 855: (8, 5, 5), 856: (8, 5, 6), 857: (8, 5, 7), 858: (8, 5, 8), 859: (8, 5, 9), 860: (8, 6, 0), 861: (8, 6, 1), 862: (8, 6, 2), 863: (8, 6, 3), 864: (8, 6, 4), 865: (8, 6, 5), 866: (8, 6, 6), 867: (8, 6, 7), 868: (8, 6, 8), 869: (8, 6, 9), 870: (8, 7, 0), 871: (8, 7, 1), 872: (8, 7, 2), 873: (8, 7, 3), 874: (8, 7, 4), 875: (8, 7, 5), 876: (8, 7, 6), 877: (8, 7, 7), 878: (8, 7, 8), 879: (8, 7, 9), 880: (8, 8, 0), 881: (8, 8, 1), 882: (8, 8, 2), 883: (8, 8, 3), 884: (8, 8, 4), 885: (8, 8, 5), 886: (8, 8, 6), 887: (8, 8, 7), 888: (8, 8, 8), 889: (8, 8, 9), 890: (8, 9, 0), 891: (8, 9, 1), 892: (8, 9, 2), 893: (8, 9, 3), 894: (8, 9, 4), 895: (8, 9, 5), 896: (8, 9, 6), 897: (8, 9, 7), 898: (8, 9, 8), 899: (8, 9, 9), 900: (9, 0, 0), 901: (9, 0, 1), 902: (9, 0, 2), 903: (9, 0, 3), 904: (9, 0, 4), 905: (9, 0, 5), 906: (9, 0, 6), 907: (9, 0, 7), 908: (9, 0, 8), 909: (9, 0, 9), 910: (9, 1, 0), 911: (9, 1, 1), 912: (9, 1, 2), 913: (9, 1, 3), 914: (9, 1, 4), 915: (9, 1, 5), 916: (9, 1, 6), 917: (9, 1, 7), 918: (9, 1, 8), 919: (9, 1, 9), 920: (9, 2, 0), 921: (9, 2, 1), 922: (9, 2, 2), 923: (9, 2, 3), 924: (9, 2, 4), 925: (9, 2, 5), 926: (9, 2, 6), 927: (9, 2, 7), 928: (9, 2, 8), 929: (9, 2, 9), 930: (9, 3, 0), 931: (9, 3, 1), 932: (9, 3, 2), 933: (9, 3, 3), 934: (9, 3, 4), 935: (9, 3, 5), 936: (9, 3, 6), 937: (9, 3, 7), 938: (9, 3, 8), 939: (9, 3, 9), 940: (9, 4, 0), 941: (9, 4, 1), 942: (9, 4, 2), 943: (9, 4, 3), 944: (9, 4, 4), 945: (9, 4, 5), 946: (9, 4, 6), 947: (9, 4, 7), 948: (9, 4, 8), 949: (9, 4, 9), 950: (9, 5, 0), 951: (9, 5, 1), 952: (9, 5, 2), 953: (9, 5, 3), 954: (9, 5, 4), 955: (9, 5, 5), 956: (9, 5, 6), 957: (9, 5, 7), 958: (9, 5, 8), 959: (9, 5, 9), 960: (9, 6, 0), 961: (9, 6, 1), 962: (9, 6, 2), 963: (9, 6, 3), 964: (9, 6, 4), 965: (9, 6, 5), 966: (9, 6, 6), 967: (9, 6, 7), 968: (9, 6, 8), 969: (9, 6, 9), 970: (9, 7, 0), 971: (9, 7, 1), 972: (9, 7, 2), 973: (9, 7, 3), 974: (9, 7, 4), 975: (9, 7, 5), 976: (9, 7, 6), 977: (9, 7, 7), 978: (9, 7, 8), 979: (9, 7, 9), 980: (9, 8, 0), 981: (9, 8, 1), 982: (9, 8, 2), 983: (9, 8, 3), 984: (9, 8, 4), 985: (9, 8, 5), 986: (9, 8, 6), 987: (9, 8, 7), 988: (9, 8, 8), 989: (9, 8, 9), 990: (9, 9, 0), 991: (9, 9, 1), 992: (9, 9, 2), 993: (9, 9, 3), 994: (9, 9, 4), 995: (9, 9, 5), 996: (9, 9, 6), 997: (9, 9, 7), 998: (9, 9, 8), 999: (9, 9, 9)}
>>> base=2
>>> digits=set(range(base))
>>> representation_dict = {i:(i//base//base,i//base%base,i%base) for i in range(base*base*base) }
>>> representation_dict
{0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 1, 0), 3: (0, 1, 1), 4: (1, 0, 0), 5: (1, 0, 1), 6: (1, 1, 0), 7: (1, 1, 1)}
>>> representation_dict = {i:(i//base//base,i//base%base,i%base) for i in range(1000) }
>>> representation_dict
{0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 1, 0), 3: (0, 1, 1), 4: (1, 0, 0), 5: (1, 0, 1), 6: (1, 1, 0), 7: (1, 1, 1), 8: (2, 0, 0), 9: (2, 0, 1), 10: (2, 1, 0), 11: (2, 1, 1), 12: (3, 0, 0), 13: (3, 0, 1), 14: (3, 1, 0), 15: (3, 1, 1), 16: (4, 0, 0), 17: (4, 0, 1), 18: (4, 1, 0), 19: (4, 1, 1), 20: (5, 0, 0), 21: (5, 0, 1), 22: (5, 1, 0), 23: (5, 1, 1), 24: (6, 0, 0), 25: (6, 0, 1), 26: (6, 1, 0), 27: (6, 1, 1), 28: (7, 0, 0), 29: (7, 0, 1), 30: (7, 1, 0), 31: (7, 1, 1), 32: (8, 0, 0), 33: (8, 0, 1), 34: (8, 1, 0), 35: (8, 1, 1), 36: (9, 0, 0), 37: (9, 0, 1), 38: (9, 1, 0), 39: (9, 1, 1), 40: (10, 0, 0), 41: (10, 0, 1), 42: (10, 1, 0), 43: (10, 1, 1), 44: (11, 0, 0), 45: (11, 0, 1), 46: (11, 1, 0), 47: (11, 1, 1), 48: (12, 0, 0), 49: (12, 0, 1), 50: (12, 1, 0), 51: (12, 1, 1), 52: (13, 0, 0), 53: (13, 0, 1), 54: (13, 1, 0), 55: (13, 1, 1), 56: (14, 0, 0), 57: (14, 0, 1), 58: (14, 1, 0), 59: (14, 1, 1), 60: (15, 0, 0), 61: (15, 0, 1), 62: (15, 1, 0), 63: (15, 1, 1), 64: (16, 0, 0), 65: (16, 0, 1), 66: (16, 1, 0), 67: (16, 1, 1), 68: (17, 0, 0), 69: (17, 0, 1), 70: (17, 1, 0), 71: (17, 1, 1), 72: (18, 0, 0), 73: (18, 0, 1), 74: (18, 1, 0), 75: (18, 1, 1), 76: (19, 0, 0), 77: (19, 0, 1), 78: (19, 1, 0), 79: (19, 1, 1), 80: (20, 0, 0), 81: (20, 0, 1), 82: (20, 1, 0), 83: (20, 1, 1), 84: (21, 0, 0), 85: (21, 0, 1), 86: (21, 1, 0), 87: (21, 1, 1), 88: (22, 0, 0), 89: (22, 0, 1), 90: (22, 1, 0), 91: (22, 1, 1), 92: (23, 0, 0), 93: (23, 0, 1), 94: (23, 1, 0), 95: (23, 1, 1), 96: (24, 0, 0), 97: (24, 0, 1), 98: (24, 1, 0), 99: (24, 1, 1), 100: (25, 0, 0), 101: (25, 0, 1), 102: (25, 1, 0), 103: (25, 1, 1), 104: (26, 0, 0), 105: (26, 0, 1), 106: (26, 1, 0), 107: (26, 1, 1), 108: (27, 0, 0), 109: (27, 0, 1), 110: (27, 1, 0), 111: (27, 1, 1), 112: (28, 0, 0), 113: (28, 0, 1), 114: (28, 1, 0), 115: (28, 1, 1), 116: (29, 0, 0), 117: (29, 0, 1), 118: (29, 1, 0), 119: (29, 1, 1), 120: (30, 0, 0), 121: (30, 0, 1), 122: (30, 1, 0), 123: (30, 1, 1), 124: (31, 0, 0), 125: (31, 0, 1), 126: (31, 1, 0), 127: (31, 1, 1), 128: (32, 0, 0), 129: (32, 0, 1), 130: (32, 1, 0), 131: (32, 1, 1), 132: (33, 0, 0), 133: (33, 0, 1), 134: (33, 1, 0), 135: (33, 1, 1), 136: (34, 0, 0), 137: (34, 0, 1), 138: (34, 1, 0), 139: (34, 1, 1), 140: (35, 0, 0), 141: (35, 0, 1), 142: (35, 1, 0), 143: (35, 1, 1), 144: (36, 0, 0), 145: (36, 0, 1), 146: (36, 1, 0), 147: (36, 1, 1), 148: (37, 0, 0), 149: (37, 0, 1), 150: (37, 1, 0), 151: (37, 1, 1), 152: (38, 0, 0), 153: (38, 0, 1), 154: (38, 1, 0), 155: (38, 1, 1), 156: (39, 0, 0), 157: (39, 0, 1), 158: (39, 1, 0), 159: (39, 1, 1), 160: (40, 0, 0), 161: (40, 0, 1), 162: (40, 1, 0), 163: (40, 1, 1), 164: (41, 0, 0), 165: (41, 0, 1), 166: (41, 1, 0), 167: (41, 1, 1), 168: (42, 0, 0), 169: (42, 0, 1), 170: (42, 1, 0), 171: (42, 1, 1), 172: (43, 0, 0), 173: (43, 0, 1), 174: (43, 1, 0), 175: (43, 1, 1), 176: (44, 0, 0), 177: (44, 0, 1), 178: (44, 1, 0), 179: (44, 1, 1), 180: (45, 0, 0), 181: (45, 0, 1), 182: (45, 1, 0), 183: (45, 1, 1), 184: (46, 0, 0), 185: (46, 0, 1), 186: (46, 1, 0), 187: (46, 1, 1), 188: (47, 0, 0), 189: (47, 0, 1), 190: (47, 1, 0), 191: (47, 1, 1), 192: (48, 0, 0), 193: (48, 0, 1), 194: (48, 1, 0), 195: (48, 1, 1), 196: (49, 0, 0), 197: (49, 0, 1), 198: (49, 1, 0), 199: (49, 1, 1), 200: (50, 0, 0), 201: (50, 0, 1), 202: (50, 1, 0), 203: (50, 1, 1), 204: (51, 0, 0), 205: (51, 0, 1), 206: (51, 1, 0), 207: (51, 1, 1), 208: (52, 0, 0), 209: (52, 0, 1), 210: (52, 1, 0), 211: (52, 1, 1), 212: (53, 0, 0), 213: (53, 0, 1), 214: (53, 1, 0), 215: (53, 1, 1), 216: (54, 0, 0), 217: (54, 0, 1), 218: (54, 1, 0), 219: (54, 1, 1), 220: (55, 0, 0), 221: (55, 0, 1), 222: (55, 1, 0), 223: (55, 1, 1), 224: (56, 0, 0), 225: (56, 0, 1), 226: (56, 1, 0), 227: (56, 1, 1), 228: (57, 0, 0), 229: (57, 0, 1), 230: (57, 1, 0), 231: (57, 1, 1), 232: (58, 0, 0), 233: (58, 0, 1), 234: (58, 1, 0), 235: (58, 1, 1), 236: (59, 0, 0), 237: (59, 0, 1), 238: (59, 1, 0), 239: (59, 1, 1), 240: (60, 0, 0), 241: (60, 0, 1), 242: (60, 1, 0), 243: (60, 1, 1), 244: (61, 0, 0), 245: (61, 0, 1), 246: (61, 1, 0), 247: (61, 1, 1), 248: (62, 0, 0), 249: (62, 0, 1), 250: (62, 1, 0), 251: (62, 1, 1), 252: (63, 0, 0), 253: (63, 0, 1), 254: (63, 1, 0), 255: (63, 1, 1), 256: (64, 0, 0), 257: (64, 0, 1), 258: (64, 1, 0), 259: (64, 1, 1), 260: (65, 0, 0), 261: (65, 0, 1), 262: (65, 1, 0), 263: (65, 1, 1), 264: (66, 0, 0), 265: (66, 0, 1), 266: (66, 1, 0), 267: (66, 1, 1), 268: (67, 0, 0), 269: (67, 0, 1), 270: (67, 1, 0), 271: (67, 1, 1), 272: (68, 0, 0), 273: (68, 0, 1), 274: (68, 1, 0), 275: (68, 1, 1), 276: (69, 0, 0), 277: (69, 0, 1), 278: (69, 1, 0), 279: (69, 1, 1), 280: (70, 0, 0), 281: (70, 0, 1), 282: (70, 1, 0), 283: (70, 1, 1), 284: (71, 0, 0), 285: (71, 0, 1), 286: (71, 1, 0), 287: (71, 1, 1), 288: (72, 0, 0), 289: (72, 0, 1), 290: (72, 1, 0), 291: (72, 1, 1), 292: (73, 0, 0), 293: (73, 0, 1), 294: (73, 1, 0), 295: (73, 1, 1), 296: (74, 0, 0), 297: (74, 0, 1), 298: (74, 1, 0), 299: (74, 1, 1), 300: (75, 0, 0), 301: (75, 0, 1), 302: (75, 1, 0), 303: (75, 1, 1), 304: (76, 0, 0), 305: (76, 0, 1), 306: (76, 1, 0), 307: (76, 1, 1), 308: (77, 0, 0), 309: (77, 0, 1), 310: (77, 1, 0), 311: (77, 1, 1), 312: (78, 0, 0), 313: (78, 0, 1), 314: (78, 1, 0), 315: (78, 1, 1), 316: (79, 0, 0), 317: (79, 0, 1), 318: (79, 1, 0), 319: (79, 1, 1), 320: (80, 0, 0), 321: (80, 0, 1), 322: (80, 1, 0), 323: (80, 1, 1), 324: (81, 0, 0), 325: (81, 0, 1), 326: (81, 1, 0), 327: (81, 1, 1), 328: (82, 0, 0), 329: (82, 0, 1), 330: (82, 1, 0), 331: (82, 1, 1), 332: (83, 0, 0), 333: (83, 0, 1), 334: (83, 1, 0), 335: (83, 1, 1), 336: (84, 0, 0), 337: (84, 0, 1), 338: (84, 1, 0), 339: (84, 1, 1), 340: (85, 0, 0), 341: (85, 0, 1), 342: (85, 1, 0), 343: (85, 1, 1), 344: (86, 0, 0), 345: (86, 0, 1), 346: (86, 1, 0), 347: (86, 1, 1), 348: (87, 0, 0), 349: (87, 0, 1), 350: (87, 1, 0), 351: (87, 1, 1), 352: (88, 0, 0), 353: (88, 0, 1), 354: (88, 1, 0), 355: (88, 1, 1), 356: (89, 0, 0), 357: (89, 0, 1), 358: (89, 1, 0), 359: (89, 1, 1), 360: (90, 0, 0), 361: (90, 0, 1), 362: (90, 1, 0), 363: (90, 1, 1), 364: (91, 0, 0), 365: (91, 0, 1), 366: (91, 1, 0), 367: (91, 1, 1), 368: (92, 0, 0), 369: (92, 0, 1), 370: (92, 1, 0), 371: (92, 1, 1), 372: (93, 0, 0), 373: (93, 0, 1), 374: (93, 1, 0), 375: (93, 1, 1), 376: (94, 0, 0), 377: (94, 0, 1), 378: (94, 1, 0), 379: (94, 1, 1), 380: (95, 0, 0), 381: (95, 0, 1), 382: (95, 1, 0), 383: (95, 1, 1), 384: (96, 0, 0), 385: (96, 0, 1), 386: (96, 1, 0), 387: (96, 1, 1), 388: (97, 0, 0), 389: (97, 0, 1), 390: (97, 1, 0), 391: (97, 1, 1), 392: (98, 0, 0), 393: (98, 0, 1), 394: (98, 1, 0), 395: (98, 1, 1), 396: (99, 0, 0), 397: (99, 0, 1), 398: (99, 1, 0), 399: (99, 1, 1), 400: (100, 0, 0), 401: (100, 0, 1), 402: (100, 1, 0), 403: (100, 1, 1), 404: (101, 0, 0), 405: (101, 0, 1), 406: (101, 1, 0), 407: (101, 1, 1), 408: (102, 0, 0), 409: (102, 0, 1), 410: (102, 1, 0), 411: (102, 1, 1), 412: (103, 0, 0), 413: (103, 0, 1), 414: (103, 1, 0), 415: (103, 1, 1), 416: (104, 0, 0), 417: (104, 0, 1), 418: (104, 1, 0), 419: (104, 1, 1), 420: (105, 0, 0), 421: (105, 0, 1), 422: (105, 1, 0), 423: (105, 1, 1), 424: (106, 0, 0), 425: (106, 0, 1), 426: (106, 1, 0), 427: (106, 1, 1), 428: (107, 0, 0), 429: (107, 0, 1), 430: (107, 1, 0), 431: (107, 1, 1), 432: (108, 0, 0), 433: (108, 0, 1), 434: (108, 1, 0), 435: (108, 1, 1), 436: (109, 0, 0), 437: (109, 0, 1), 438: (109, 1, 0), 439: (109, 1, 1), 440: (110, 0, 0), 441: (110, 0, 1), 442: (110, 1, 0), 443: (110, 1, 1), 444: (111, 0, 0), 445: (111, 0, 1), 446: (111, 1, 0), 447: (111, 1, 1), 448: (112, 0, 0), 449: (112, 0, 1), 450: (112, 1, 0), 451: (112, 1, 1), 452: (113, 0, 0), 453: (113, 0, 1), 454: (113, 1, 0), 455: (113, 1, 1), 456: (114, 0, 0), 457: (114, 0, 1), 458: (114, 1, 0), 459: (114, 1, 1), 460: (115, 0, 0), 461: (115, 0, 1), 462: (115, 1, 0), 463: (115, 1, 1), 464: (116, 0, 0), 465: (116, 0, 1), 466: (116, 1, 0), 467: (116, 1, 1), 468: (117, 0, 0), 469: (117, 0, 1), 470: (117, 1, 0), 471: (117, 1, 1), 472: (118, 0, 0), 473: (118, 0, 1), 474: (118, 1, 0), 475: (118, 1, 1), 476: (119, 0, 0), 477: (119, 0, 1), 478: (119, 1, 0), 479: (119, 1, 1), 480: (120, 0, 0), 481: (120, 0, 1), 482: (120, 1, 0), 483: (120, 1, 1), 484: (121, 0, 0), 485: (121, 0, 1), 486: (121, 1, 0), 487: (121, 1, 1), 488: (122, 0, 0), 489: (122, 0, 1), 490: (122, 1, 0), 491: (122, 1, 1), 492: (123, 0, 0), 493: (123, 0, 1), 494: (123, 1, 0), 495: (123, 1, 1), 496: (124, 0, 0), 497: (124, 0, 1), 498: (124, 1, 0), 499: (124, 1, 1), 500: (125, 0, 0), 501: (125, 0, 1), 502: (125, 1, 0), 503: (125, 1, 1), 504: (126, 0, 0), 505: (126, 0, 1), 506: (126, 1, 0), 507: (126, 1, 1), 508: (127, 0, 0), 509: (127, 0, 1), 510: (127, 1, 0), 511: (127, 1, 1), 512: (128, 0, 0), 513: (128, 0, 1), 514: (128, 1, 0), 515: (128, 1, 1), 516: (129, 0, 0), 517: (129, 0, 1), 518: (129, 1, 0), 519: (129, 1, 1), 520: (130, 0, 0), 521: (130, 0, 1), 522: (130, 1, 0), 523: (130, 1, 1), 524: (131, 0, 0), 525: (131, 0, 1), 526: (131, 1, 0), 527: (131, 1, 1), 528: (132, 0, 0), 529: (132, 0, 1), 530: (132, 1, 0), 531: (132, 1, 1), 532: (133, 0, 0), 533: (133, 0, 1), 534: (133, 1, 0), 535: (133, 1, 1), 536: (134, 0, 0), 537: (134, 0, 1), 538: (134, 1, 0), 539: (134, 1, 1), 540: (135, 0, 0), 541: (135, 0, 1), 542: (135, 1, 0), 543: (135, 1, 1), 544: (136, 0, 0), 545: (136, 0, 1), 546: (136, 1, 0), 547: (136, 1, 1), 548: (137, 0, 0), 549: (137, 0, 1), 550: (137, 1, 0), 551: (137, 1, 1), 552: (138, 0, 0), 553: (138, 0, 1), 554: (138, 1, 0), 555: (138, 1, 1), 556: (139, 0, 0), 557: (139, 0, 1), 558: (139, 1, 0), 559: (139, 1, 1), 560: (140, 0, 0), 561: (140, 0, 1), 562: (140, 1, 0), 563: (140, 1, 1), 564: (141, 0, 0), 565: (141, 0, 1), 566: (141, 1, 0), 567: (141, 1, 1), 568: (142, 0, 0), 569: (142, 0, 1), 570: (142, 1, 0), 571: (142, 1, 1), 572: (143, 0, 0), 573: (143, 0, 1), 574: (143, 1, 0), 575: (143, 1, 1), 576: (144, 0, 0), 577: (144, 0, 1), 578: (144, 1, 0), 579: (144, 1, 1), 580: (145, 0, 0), 581: (145, 0, 1), 582: (145, 1, 0), 583: (145, 1, 1), 584: (146, 0, 0), 585: (146, 0, 1), 586: (146, 1, 0), 587: (146, 1, 1), 588: (147, 0, 0), 589: (147, 0, 1), 590: (147, 1, 0), 591: (147, 1, 1), 592: (148, 0, 0), 593: (148, 0, 1), 594: (148, 1, 0), 595: (148, 1, 1), 596: (149, 0, 0), 597: (149, 0, 1), 598: (149, 1, 0), 599: (149, 1, 1), 600: (150, 0, 0), 601: (150, 0, 1), 602: (150, 1, 0), 603: (150, 1, 1), 604: (151, 0, 0), 605: (151, 0, 1), 606: (151, 1, 0), 607: (151, 1, 1), 608: (152, 0, 0), 609: (152, 0, 1), 610: (152, 1, 0), 611: (152, 1, 1), 612: (153, 0, 0), 613: (153, 0, 1), 614: (153, 1, 0), 615: (153, 1, 1), 616: (154, 0, 0), 617: (154, 0, 1), 618: (154, 1, 0), 619: (154, 1, 1), 620: (155, 0, 0), 621: (155, 0, 1), 622: (155, 1, 0), 623: (155, 1, 1), 624: (156, 0, 0), 625: (156, 0, 1), 626: (156, 1, 0), 627: (156, 1, 1), 628: (157, 0, 0), 629: (157, 0, 1), 630: (157, 1, 0), 631: (157, 1, 1), 632: (158, 0, 0), 633: (158, 0, 1), 634: (158, 1, 0), 635: (158, 1, 1), 636: (159, 0, 0), 637: (159, 0, 1), 638: (159, 1, 0), 639: (159, 1, 1), 640: (160, 0, 0), 641: (160, 0, 1), 642: (160, 1, 0), 643: (160, 1, 1), 644: (161, 0, 0), 645: (161, 0, 1), 646: (161, 1, 0), 647: (161, 1, 1), 648: (162, 0, 0), 649: (162, 0, 1), 650: (162, 1, 0), 651: (162, 1, 1), 652: (163, 0, 0), 653: (163, 0, 1), 654: (163, 1, 0), 655: (163, 1, 1), 656: (164, 0, 0), 657: (164, 0, 1), 658: (164, 1, 0), 659: (164, 1, 1), 660: (165, 0, 0), 661: (165, 0, 1), 662: (165, 1, 0), 663: (165, 1, 1), 664: (166, 0, 0), 665: (166, 0, 1), 666: (166, 1, 0), 667: (166, 1, 1), 668: (167, 0, 0), 669: (167, 0, 1), 670: (167, 1, 0), 671: (167, 1, 1), 672: (168, 0, 0), 673: (168, 0, 1), 674: (168, 1, 0), 675: (168, 1, 1), 676: (169, 0, 0), 677: (169, 0, 1), 678: (169, 1, 0), 679: (169, 1, 1), 680: (170, 0, 0), 681: (170, 0, 1), 682: (170, 1, 0), 683: (170, 1, 1), 684: (171, 0, 0), 685: (171, 0, 1), 686: (171, 1, 0), 687: (171, 1, 1), 688: (172, 0, 0), 689: (172, 0, 1), 690: (172, 1, 0), 691: (172, 1, 1), 692: (173, 0, 0), 693: (173, 0, 1), 694: (173, 1, 0), 695: (173, 1, 1), 696: (174, 0, 0), 697: (174, 0, 1), 698: (174, 1, 0), 699: (174, 1, 1), 700: (175, 0, 0), 701: (175, 0, 1), 702: (175, 1, 0), 703: (175, 1, 1), 704: (176, 0, 0), 705: (176, 0, 1), 706: (176, 1, 0), 707: (176, 1, 1), 708: (177, 0, 0), 709: (177, 0, 1), 710: (177, 1, 0), 711: (177, 1, 1), 712: (178, 0, 0), 713: (178, 0, 1), 714: (178, 1, 0), 715: (178, 1, 1), 716: (179, 0, 0), 717: (179, 0, 1), 718: (179, 1, 0), 719: (179, 1, 1), 720: (180, 0, 0), 721: (180, 0, 1), 722: (180, 1, 0), 723: (180, 1, 1), 724: (181, 0, 0), 725: (181, 0, 1), 726: (181, 1, 0), 727: (181, 1, 1), 728: (182, 0, 0), 729: (182, 0, 1), 730: (182, 1, 0), 731: (182, 1, 1), 732: (183, 0, 0), 733: (183, 0, 1), 734: (183, 1, 0), 735: (183, 1, 1), 736: (184, 0, 0), 737: (184, 0, 1), 738: (184, 1, 0), 739: (184, 1, 1), 740: (185, 0, 0), 741: (185, 0, 1), 742: (185, 1, 0), 743: (185, 1, 1), 744: (186, 0, 0), 745: (186, 0, 1), 746: (186, 1, 0), 747: (186, 1, 1), 748: (187, 0, 0), 749: (187, 0, 1), 750: (187, 1, 0), 751: (187, 1, 1), 752: (188, 0, 0), 753: (188, 0, 1), 754: (188, 1, 0), 755: (188, 1, 1), 756: (189, 0, 0), 757: (189, 0, 1), 758: (189, 1, 0), 759: (189, 1, 1), 760: (190, 0, 0), 761: (190, 0, 1), 762: (190, 1, 0), 763: (190, 1, 1), 764: (191, 0, 0), 765: (191, 0, 1), 766: (191, 1, 0), 767: (191, 1, 1), 768: (192, 0, 0), 769: (192, 0, 1), 770: (192, 1, 0), 771: (192, 1, 1), 772: (193, 0, 0), 773: (193, 0, 1), 774: (193, 1, 0), 775: (193, 1, 1), 776: (194, 0, 0), 777: (194, 0, 1), 778: (194, 1, 0), 779: (194, 1, 1), 780: (195, 0, 0), 781: (195, 0, 1), 782: (195, 1, 0), 783: (195, 1, 1), 784: (196, 0, 0), 785: (196, 0, 1), 786: (196, 1, 0), 787: (196, 1, 1), 788: (197, 0, 0), 789: (197, 0, 1), 790: (197, 1, 0), 791: (197, 1, 1), 792: (198, 0, 0), 793: (198, 0, 1), 794: (198, 1, 0), 795: (198, 1, 1), 796: (199, 0, 0), 797: (199, 0, 1), 798: (199, 1, 0), 799: (199, 1, 1), 800: (200, 0, 0), 801: (200, 0, 1), 802: (200, 1, 0), 803: (200, 1, 1), 804: (201, 0, 0), 805: (201, 0, 1), 806: (201, 1, 0), 807: (201, 1, 1), 808: (202, 0, 0), 809: (202, 0, 1), 810: (202, 1, 0), 811: (202, 1, 1), 812: (203, 0, 0), 813: (203, 0, 1), 814: (203, 1, 0), 815: (203, 1, 1), 816: (204, 0, 0), 817: (204, 0, 1), 818: (204, 1, 0), 819: (204, 1, 1), 820: (205, 0, 0), 821: (205, 0, 1), 822: (205, 1, 0), 823: (205, 1, 1), 824: (206, 0, 0), 825: (206, 0, 1), 826: (206, 1, 0), 827: (206, 1, 1), 828: (207, 0, 0), 829: (207, 0, 1), 830: (207, 1, 0), 831: (207, 1, 1), 832: (208, 0, 0), 833: (208, 0, 1), 834: (208, 1, 0), 835: (208, 1, 1), 836: (209, 0, 0), 837: (209, 0, 1), 838: (209, 1, 0), 839: (209, 1, 1), 840: (210, 0, 0), 841: (210, 0, 1), 842: (210, 1, 0), 843: (210, 1, 1), 844: (211, 0, 0), 845: (211, 0, 1), 846: (211, 1, 0), 847: (211, 1, 1), 848: (212, 0, 0), 849: (212, 0, 1), 850: (212, 1, 0), 851: (212, 1, 1), 852: (213, 0, 0), 853: (213, 0, 1), 854: (213, 1, 0), 855: (213, 1, 1), 856: (214, 0, 0), 857: (214, 0, 1), 858: (214, 1, 0), 859: (214, 1, 1), 860: (215, 0, 0), 861: (215, 0, 1), 862: (215, 1, 0), 863: (215, 1, 1), 864: (216, 0, 0), 865: (216, 0, 1), 866: (216, 1, 0), 867: (216, 1, 1), 868: (217, 0, 0), 869: (217, 0, 1), 870: (217, 1, 0), 871: (217, 1, 1), 872: (218, 0, 0), 873: (218, 0, 1), 874: (218, 1, 0), 875: (218, 1, 1), 876: (219, 0, 0), 877: (219, 0, 1), 878: (219, 1, 0), 879: (219, 1, 1), 880: (220, 0, 0), 881: (220, 0, 1), 882: (220, 1, 0), 883: (220, 1, 1), 884: (221, 0, 0), 885: (221, 0, 1), 886: (221, 1, 0), 887: (221, 1, 1), 888: (222, 0, 0), 889: (222, 0, 1), 890: (222, 1, 0), 891: (222, 1, 1), 892: (223, 0, 0), 893: (223, 0, 1), 894: (223, 1, 0), 895: (223, 1, 1), 896: (224, 0, 0), 897: (224, 0, 1), 898: (224, 1, 0), 899: (224, 1, 1), 900: (225, 0, 0), 901: (225, 0, 1), 902: (225, 1, 0), 903: (225, 1, 1), 904: (226, 0, 0), 905: (226, 0, 1), 906: (226, 1, 0), 907: (226, 1, 1), 908: (227, 0, 0), 909: (227, 0, 1), 910: (227, 1, 0), 911: (227, 1, 1), 912: (228, 0, 0), 913: (228, 0, 1), 914: (228, 1, 0), 915: (228, 1, 1), 916: (229, 0, 0), 917: (229, 0, 1), 918: (229, 1, 0), 919: (229, 1, 1), 920: (230, 0, 0), 921: (230, 0, 1), 922: (230, 1, 0), 923: (230, 1, 1), 924: (231, 0, 0), 925: (231, 0, 1), 926: (231, 1, 0), 927: (231, 1, 1), 928: (232, 0, 0), 929: (232, 0, 1), 930: (232, 1, 0), 931: (232, 1, 1), 932: (233, 0, 0), 933: (233, 0, 1), 934: (233, 1, 0), 935: (233, 1, 1), 936: (234, 0, 0), 937: (234, 0, 1), 938: (234, 1, 0), 939: (234, 1, 1), 940: (235, 0, 0), 941: (235, 0, 1), 942: (235, 1, 0), 943: (235, 1, 1), 944: (236, 0, 0), 945: (236, 0, 1), 946: (236, 1, 0), 947: (236, 1, 1), 948: (237, 0, 0), 949: (237, 0, 1), 950: (237, 1, 0), 951: (237, 1, 1), 952: (238, 0, 0), 953: (238, 0, 1), 954: (238, 1, 0), 955: (238, 1, 1), 956: (239, 0, 0), 957: (239, 0, 1), 958: (239, 1, 0), 959: (239, 1, 1), 960: (240, 0, 0), 961: (240, 0, 1), 962: (240, 1, 0), 963: (240, 1, 1), 964: (241, 0, 0), 965: (241, 0, 1), 966: (241, 1, 0), 967: (241, 1, 1), 968: (242, 0, 0), 969: (242, 0, 1), 970: (242, 1, 0), 971: (242, 1, 1), 972: (243, 0, 0), 973: (243, 0, 1), 974: (243, 1, 0), 975: (243, 1, 1), 976: (244, 0, 0), 977: (244, 0, 1), 978: (244, 1, 0), 979: (244, 1, 1), 980: (245, 0, 0), 981: (245, 0, 1), 982: (245, 1, 0), 983: (245, 1, 1), 984: (246, 0, 0), 985: (246, 0, 1), 986: (246, 1, 0), 987: (246, 1, 1), 988: (247, 0, 0), 989: (247, 0, 1), 990: (247, 1, 0), 991: (247, 1, 1), 992: (248, 0, 0), 993: (248, 0, 1), 994: (248, 1, 0), 995: (248, 1, 1), 996: (249, 0, 0), 997: (249, 0, 1), 998: (249, 1, 0), 999: (249, 1, 1)}
>>> [ k for k in {'blue': 'blue', 'red': 'red', 'white': 'white'}.keys()]
['blue', 'red', 'white']
>>> [ k for k in {'blue': 'blue', 'red': 'red', 'white': 'white'}.values()]
['blue', 'red', 'white']
>>> [ k for k in {'blue': 'blue', 'red': 'red', 'white': 'white'}.items()]
[('blue', 'blue'), ('red', 'red'), ('white', 'white')]
>>> [ k for (k,v) in {'blue': 'blue', 'red': 'red', 'white': 'white'}.items()]
['blue', 'red', 'white']
>>> id2salary = { 0:1000.0, 3:990, 1:1200.5}
>>> names = ['Larry', 'Curly', '', 'Moe' ]
>>> { names[id]:salary for (id, salary) in id2salary }
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <dictcomp>
TypeError: 'int' object is not iterable
>>> { names[id]:salary for (id, salary) in id2salary.items() }
{'Moe': 990, 'Larry': 1000.0, 'Curly': 1200.5}
>>> { names[k]:id2salary.get(k) for k in id2salary.keys()}
{'Moe': 990, 'Larry': 1000.0, 'Curly': 1200.5}
>>> def twice(z): return 2*z
...
>>> def twice(z): return 2*z
...
>>> def twice(z): return 2*z;
...
>>> def twice(z): return 2*z
...
>>> twice(2)
4
>>> twice([1,2])
[1, 2, 1, 2]
>>> 2 * [1,2]
[1, 2, 1, 2]
>>> def add_one(L): return [ x + 1 for x in L ]
...
>>> add_one([1,2])
[2, 3]
>>> [2, 3] + 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate list (not "int") to list
>>> [2, 3] *2
[2, 3, 2, 3]
>>> add_one(["aaa","bbb"])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in add_one
  File "<stdin>", line 1, in <listcomp>
TypeError: Can't convert 'int' object to str implicitly
>>> add_one([[1,2],[1,2]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in add_one
  File "<stdin>", line 1, in <listcomp>
TypeError: can only concatenate list (not "int") to list
>>> add_one([(1,2),(1,2)])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in add_one
  File "<stdin>", line 1, in <listcomp>
TypeError: can only concatenate tuple (not "int") to tuple
>>> def cube(L): return [ x**3 for x in L ]
...
>>> cube([2,3])
[8, 27]
>>> import(math)
  File "<stdin>", line 1
    import(math)
          ^
SyntaxError: invalid syntax
>>> import math
>>> help(math)
Help on built-in module math:

NAME
    math

DESCRIPTION
    This module is always available.  It provides access to the
    mathematical functions defined by the C standard.

FUNCTIONS
    acos(...)
        acos(x)

        Return the arc cosine (measured in radians) of x.

    acosh(...)
        acosh(x)

        Return the inverse hyperbolic cosine of x.

    asin(...)
        asin(x)

        Return the arc sine (measured in radians) of x.

    asinh(...)
        asinh(x)

        Return the inverse hyperbolic sine of x.

    atan(...)
        atan(x)

        Return the arc tangent (measured in radians) of x.

    atan2(...)
        atan2(y, x)

        Return the arc tangent (measured in radians) of y/x.
        Unlike atan(y/x), the signs of both x and y are considered.

    atanh(...)
        atanh(x)

        Return the inverse hyperbolic tangent of x.

    ceil(...)
        ceil(x)

        Return the ceiling of x as an Integral.
        This is the smallest integer >= x.

    copysign(...)
        copysign(x, y)

        Return a float with the magnitude (absolute value) of x but the sign
        of y. On platforms that support signed zeros, copysign(1.0, -0.0)
        returns -1.0.

    cos(...)
        cos(x)

        Return the cosine of x (measured in radians).

    cosh(...)
        cosh(x)

        Return the hyperbolic cosine of x.

    degrees(...)
        degrees(x)

        Convert angle x from radians to degrees.

    erf(...)
        erf(x)

        Error function at x.

    erfc(...)
        erfc(x)

        Complementary error function at x.

    exp(...)
        exp(x)

        Return e raised to the power of x.

    expm1(...)
        expm1(x)

        Return exp(x)-1.
        This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.

    fabs(...)
        fabs(x)

        Return the absolute value of the float x.

    factorial(...)
        factorial(x) -> Integral

        Find x!. Raise a ValueError if x is negative or non-integral.

    floor(...)
        floor(x)

        Return the floor of x as an Integral.
        This is the largest integer <= x.

    fmod(...)
        fmod(x, y)

        Return fmod(x, y), according to platform C.  x % y may differ.

    frexp(...)
        frexp(x)

        Return the mantissa and exponent of x, as pair (m, e).
        m is a float and e is an int, such that x = m * 2.**e.
        If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.

    fsum(...)
        fsum(iterable)

        Return an accurate floating point sum of values in the iterable.
        Assumes IEEE-754 floating point arithmetic.

    gamma(...)
        gamma(x)

        Gamma function at x.

    gcd(...)
        gcd(x, y) -> int
        greatest common divisor of x and y

    hypot(...)
        hypot(x, y)

        Return the Euclidean distance, sqrt(x*x + y*y).

    isclose(...)
        isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0) -> bool

        Determine whether two floating point numbers are close in value.

           rel_tol
               maximum difference for being considered "close", relative to the
               magnitude of the input values
            abs_tol
               maximum difference for being considered "close", regardless of the
               magnitude of the input values

        Return True if a is close in value to b, and False otherwise.

        For the values to be considered close, the difference between them
        must be smaller than at least one of the tolerances.

        -inf, inf and NaN behave similarly to the IEEE 754 Standard.  That
        is, NaN is not close to anything, even itself.  inf and -inf are
        only close to themselves.

    isfinite(...)
        isfinite(x) -> bool

        Return True if x is neither an infinity nor a NaN, and False otherwise.

    isinf(...)
        isinf(x) -> bool

        Return True if x is a positive or negative infinity, and False otherwise.

    isnan(...)
        isnan(x) -> bool

        Return True if x is a NaN (not a number), and False otherwise.

    ldexp(...)
        ldexp(x, i)

        Return x * (2**i).

    lgamma(...)
        lgamma(x)

        Natural logarithm of absolute value of Gamma function at x.

    log(...)
        log(x[, base])

        Return the logarithm of x to the given base.
        If the base not specified, returns the natural logarithm (base e) of x.

    log10(...)
        log10(x)

        Return the base 10 logarithm of x.

    log1p(...)
        log1p(x)

        Return the natural logarithm of 1+x (base e).
        The result is computed in a way which is accurate for x near zero.

    log2(...)
        log2(x)

        Return the base 2 logarithm of x.

    modf(...)
        modf(x)

        Return the fractional and integer parts of x.  Both results carry the sign
        of x and are floats.

    pow(...)
        pow(x, y)

        Return x**y (x to the power of y).

    radians(...)
        radians(x)

        Convert angle x from degrees to radians.

    sin(...)
        sin(x)

        Return the sine of x (measured in radians).

    sinh(...)
        sinh(x)

        Return the hyperbolic sine of x.

    sqrt(...)
        sqrt(x)

        Return the square root of x.

    tan(...)
        tan(x)

        Return the tangent of x (measured in radians).

    tanh(...)
        tanh(x)

        Return the hyperbolic tangent of x.

    trunc(...)
        trunc(x:Real) -> Integral

        Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.

DATA
    e = 2.718281828459045
    inf = inf
    nan = nan
    pi = 3.141592653589793

FILE
    (built-in)


>> >
>>> sqrt3)
  File "<stdin>", line 1
    sqrt3)
         ^
SyntaxError: invalid syntax
>>> sqrt(3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sqrt' is not defined
>>> import math
>>> sqrt(3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sqrt' is not defined
>>> math.sqrt(3)
1.7320508075688772
>>> math.sqrt(3)**2
2.9999999999999996
>>> math.sqrt(-1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: math domain error
>>> cosin(math.pi(
... ))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'cosin' is not defined
>>> math.sqrt(3)**2

2.9999999999999996
>>> >>> math.cos(math.pi())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'float' object is not callable
>>> math.cos(math.pi)
-1.0
>>> math.log(math.e)
1.0
>>> math.ln(math.e)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'math' has no attribute 'ln'
>>> from math import pi
>>> pi
3.141592653589793
>>> os.chdir("~/Development/phd/neurite/projects/python/")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: '~/Development/phd/neurite/projects/python/'
>>> os.chdir("/home/marco/Development/phd/neurite/projects/python/")
>>> import simple
>>> list2dict
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'list2dict' is not defined
>>> simple.list2dict
<function list2dict at 0x7f135cc506a8>
>>>
>>> from random import randint
>>> randint
<bound method Random.randint of <random.Random object at 0xe769a8>>
>>> randint()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: randint() missing 2 required positional arguments: 'a' and 'b'
>>> randint(0,1)
0
>>> randint(0,2)
2
>>> randint(0,3)
0
>>> randint(0,4)
3
>>> from imp import reload
>>> L
['A', 'B', 'C', 'D', 'E']
>>> for x in L: print(x)
...
A
B
C
D
E
>>> S={2+2j,3+2j,1.75+1j, 2+1j,2.25+1j,2.5+1j,2.75+1j,3+1j,3.25+1j}
>>> from plotting import plot
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named 'plotting'
>>> from plotting import plot
>>> plot(S, 4)
>>> [1:1:0907/153142:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[21931:21931:0907/153142:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[21931:21961:0907/153142:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> { z + 1 + 2j for z in S }
{(2.75+3j), (3.75+3j), (3.5+3j), (4.25+3j), (3.25+3j), (4+3j), (3+3j), (4+4j), (3+4j)}
>>> S1 = { z + 1 + 2j for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/153819:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22083:22083:0907/153819:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22083:22113:0907/153820:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { z + 1 + 0j for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/153921:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22186:22186:0907/153921:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22186:22216:0907/153921:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { z - 1 + 0j for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/154028:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22284:22284:0907/154028:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22284:22314:0907/154028:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.
S1 = { z - 2 - 2j for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/154223:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22388:22388:0907/154223:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22388:22418:0907/154223:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { 1/2 * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/155921:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22617:22617:0907/155921:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22617:22647:0907/155921:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { 4 * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/155939:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22714:22714:0907/155939:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22714:22744:0907/155939:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { 2 * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/155949:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22811:22811:0907/155949:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22811:22841:0907/155949:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { -1 * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/160049:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22908:22908:0907/160049:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[22908:22938:0907/160049:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { -j * z for z in S }
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <setcomp>
NameError: name 'j' is not defined
>>> S1 = { -1j * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/160141:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23004:23004:0907/160141:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23004:23034:0907/160142:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { 1j * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/160200:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23101:23101:0907/160200:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23101:23131:0907/160200:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { -1 * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/160344:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23198:23198:0907/160344:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23198:23228:0907/160344:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.
S1 = { - * z for z in S }
  File "<stdin>", line 1
    S1 = { - * z for z in S }
             ^
SyntaxError: invalid syntax
>>> S1 = { 1 * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/160407:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23300:23300:0907/160407:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23300:23330:0907/160407:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { -1 * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/160442:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23398:23398:0907/160442:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23398:23428:0907/160442:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { -j * z for z in S }
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <setcomp>
NameError: name 'j' is not defined
>>> S1 = { -1j * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/160746:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23537:23537:0907/160746:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23537:23567:0907/160746:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>>
>>>
>>> S1 = { 1 * z for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/161049:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23750:23750:0907/161049:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23750:23779:0907/161049:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>>
>>> plot(S1, 4)
>>> [1:1:0907/161107:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23847:23847:0907/161107:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23847:23877:0907/161107:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S
{(1.75+1j), (2.25+1j), (3+1j), (2.5+1j), (2.75+1j), (3.25+1j), (2+1j), (3+2j), (2+2j)}
>>> S1
{(1.75+1j), (2.5+1j), (2.75+1j), (3.25+1j), (2.25+1j), (3+1j), (2+1j), (3+2j), (2+2j)}
>>> S1 = { 1j * z for z in S }
>>> S1
{(-1+1.75j), (-1+2.75j), (-1+2.25j), (-1+2.5j), (-1+3.25j), (-1+3j), (-1+2j), (-2+3j), (-2+2j)}
>>> plot(S1, 4)
>>> [1:1:0907/161217:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23944:23944:0907/161217:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[23944:23974:0907/161217:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { ((-1j * z) / 1/2 ) + j + 2 for z in S }
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <setcomp>
NameError: name 'j' is not defined
>>> S1 = { ((-1j * z) / 1/2 ) + 1 + 2j for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/161932:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[24110:24110:0907/161932:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[24110:24140:0907/161932:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.
S1 = { ((-1j * z) / 1/2 ) + 1 + 2j for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/162024:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[24208:24208:0907/162024:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[24208:24238:0907/162024:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { (((-1j * z) / 1/2 )) + 1 + 2j for z in S }
>>> S1
{(1.5+0.875j), (1.5+0.375j), (1.5+0.625j), (1.5+1.125j), (1.5+0.5j), (1.5+0.75j), (1.5+1j), (2+0.5j), (2+1j)}
>>> plot(S1, 4)
>>> [1:1:0907/162240:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[24394:24394:0907/162240:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[24394:24424:0907/162240:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> S1 = { (((-1j * z) / 1/2 )) + (2 - 1j for z in S }
  File "<stdin>", line 1
    S1 = { (((-1j * z) / 1/2 )) + (2 - 1j for z in S }
                                                     ^
SyntaxError: invalid syntax
>>> S1 = { (((-1j * z) / 1/2 )) + (2 - 1j) for z in S }
>>> plot(S1, 4)
>>> [1:1:0907/162320:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[24492:24492:0907/162320:ERROR:chrome_content_client.cc(335)] Failed to locate and load the component updated flash plugin.
[24492:24522:0907/162320:ERROR:nss_util.cc(809)] After loading Root Certs, loaded==false: NSS error code: -8018
Created new window in existing browser session.

>>> from image import file2image
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/marco/Development/phd/neurite/projects/python/image.py", line 16, in <module>
    import png
ImportError: No module named 'png'
>>> from image import file2image
>>> file2image("img01.png")

  File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>> S2 = file2image("img01.png")
>>> plot (S2,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/marco/Development/phd/neurite/projects/python/plotting.py", line 43, in plot
    x,y = pt
ValueError: too many values to unpack (expected 2)
>>> S2.range(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'range'
>>> S2.first(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'first'
>>> S2[0]
[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]
>>> S2[0][0]
(183, 183, 183)
>>> data = file2image("img01.png")
>>> data[0][0]
(183, 183, 183)
>>> data = colorgray("img01.png")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'colorgray' is not defined
>>> data = image.colorgray("img01.png")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'image' is not defined
>>> from image import colorgray
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: cannot import name 'colorgray'
>>> from image import color2gray
>>> data = color2gray("img01.png")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/marco/Development/phd/neurite/projects/python/image.py", line 55, in color2gray
    for row in image]
  File "/home/marco/Development/phd/neurite/projects/python/image.py", line 55, in <listcomp>
    for row in image]
  File "/home/marco/Development/phd/neurite/projects/python/image.py", line 54, in <listcomp>
    return [[int(0.2126*p[0] + 0.7152*p[1] + 0.0722*p[2]) for p in row]
TypeError: can't multiply sequence by non-int of type 'float'
>>> data = image("img01.png")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'image' is not defined
>>> data = file2image("img01.png")
>>> data[0][0]
(183, 183, 183)
>>> int(0.2126*183 + 0.7152*183 + 0.0722*183
...
... )
183
>>> int(0.2126*1.0 + 0.7152*1.0 + 0.0722*1.0)
183
>>> int(0.2126*1.0 + 0.7152*1.0 + 0.0722*1.0)
1
>>> data[:2]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)], [(180, 180, 180), (182, 182, 182), (184, 184, 184), (186, 186, 186), (186, 186, 186), (186, 186, 186), (184, 184, 184), (183, 183, 183), (184, 184, 184), (185, 185, 185), (187, 187, 187), (188, 188, 188), (190, 190, 190), (191, 191, 191), (192, 192, 192), (193, 193, 193), (194, 194, 194), (194, 194, 194), (193, 193, 193), (192, 192, 192), (190, 190, 190), (189, 189, 189), (188, 188, 188), (188, 188, 188), (189, 189, 189), (190, 190, 190), (189, 189, 189), (186, 186, 186), (185, 185, 185), (187, 187, 187), (189, 189, 189), (189, 189, 189), (187, 187, 187), (187, 187, 187), (188, 188, 188), (189, 189, 189), (192, 192, 192), (196, 196, 196), (200, 200, 200), (202, 202, 202), (211, 211, 211), (211, 211, 211), (209, 209, 209), (206, 206, 206), (205, 205, 205), (204, 204, 204), (198, 198, 198), (189, 189, 189), (186, 186, 186), (155, 155, 155), (132, 132, 132), (124, 124, 124), (111, 111, 111), (101, 101, 101), (106, 106, 106), (116, 116, 116), (115, 115, 115), (128, 128, 128), (142, 142, 142), (142, 142, 142), (128, 128, 128), (113, 113, 113), (110, 110, 110), (114, 114, 114), (120, 120, 120), (121, 121, 121), (128, 128, 128), (130, 130, 130), (117, 117, 117), (126, 126, 126), (144, 144, 144), (165, 165, 165), (131, 131, 131), (128, 128, 128), (128, 128, 128), (133, 133, 133), (139, 139, 139), (142, 142, 142), (145, 145, 145), (147, 147, 147), (143, 143, 143), (123, 123, 123), (128, 128, 128), (157, 157, 157), (164, 164, 164), (141, 141, 141), (131, 131, 131), (142, 142, 142), (157, 157, 157), (166, 166, 166), (164, 164, 164), (149, 149, 149), (155, 155, 155), (160, 160, 160), (153, 153, 153), (163, 163, 163), (167, 167, 167), (166, 166, 166), (163, 163, 163), (164, 164, 164), (171, 171, 171), (174, 174, 174), (168, 168, 168), (157, 157, 157), (146, 146, 146), (146, 146, 146), (153, 153, 153), (169, 169, 169), (183, 183, 183), (190, 190, 190), (192, 192, 192), (193, 193, 193), (180, 180, 180), (178, 178, 178), (176, 176, 176), (174, 174, 174), (171, 171, 171), (167, 167, 167), (166, 166, 166), (167, 167, 167), (186, 186, 186), (196, 196, 196), (195, 195, 195), (188, 188, 188), (186, 186, 186), (184, 184, 184), (181, 181, 181), (182, 182, 182), (185, 185, 185), (196, 196, 196), (200, 200, 200), (189, 189, 189), (191, 191, 191), (196, 196, 196), (192, 192, 192), (202, 202, 202), (196, 196, 196), (192, 192, 192), (189, 189, 189), (189, 189, 189), (189, 189, 189), (188, 188, 188), (187, 187, 187), (186, 186, 186), (191, 191, 191), (191, 191, 191), (189, 189, 189), (187, 187, 187), (186, 186, 186), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (183, 183, 183), (182, 182, 182), (181, 181, 181), (181, 181, 181), (179, 179, 179), (177, 177, 177), (176, 176, 176), (179, 179, 179), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177), (176, 176, 176)]]
>>> data[:1]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]]
>>> data[:1][:1]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]]
>>> (data[:1])[:1]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]]
>>> [ data[:1] [[int(0.2126*p[0] + 0.7152*p[1] + 0.0722*p[2]) for p in row] ]
...
... ]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'row' is not defined
>>> [ [[int(0.2126*p[0] + 0.7152*p[1] + 0.0722*p[2]) for p in data[:1] ]
... [
... ]
  File "<stdin>", line 3
    ]
    ^
SyntaxError: invalid syntax
>>> [ int(0.2126*p[0] + 0.7152*p[1] + 0.0722*p[2]) for p in data[:1] ]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <listcomp>
TypeError: can't multiply sequence by non-int of type 'float'
>>> [ int(0.2126*p[0] + 0.7152*p[1] + 0.0722*p[2]) for p in row for row in data[:1] ]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'row' is not defined
>>> [ int(0.2126*p[0] + 0.7152*p[1] + 0.0722*p[2]) for p in x for x in data[:1] ]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <listcomp>
TypeError: can't multiply sequence by non-int of type 'float'
>>> [ x for p in x for x in data[:1] ]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]]
>>> [ p for p in x for x in data[:1] ]
['E']
>>> [ for x in data[:1] ]
  File "<stdin>", line 1
    [ for x in data[:1] ]
        ^
SyntaxError: invalid syntax
>>> [ x for x in data[:1] ]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]]
>>> [ x[0] for x in data[:1] ]
[(183, 183, 183)]
>>> [ y for y in x for x in data[:1] ]
['E']
>>> [ y*2 for y in x for x in data[:1] ]
['EE']
>>> [ x[0] for x in data[:1] ]
[(183, 183, 183)]
>>> [ y for x in data[:1] for y in x ]
[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]
>>> [ x for x in data[:1] ]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]]
>>> [[el for el in row] for row in data[:1] ]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]]
>>> [[el - 1 for el in row] for row in data[:1] ]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <listcomp>
  File "<stdin>", line 1, in <listcomp>
TypeError: unsupported operand type(s) for -: 'tuple' and 'int'
>>> [ [el for el in row] for row in data[:1] ]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]]
>>> [ [ el[0] for el in row] for row in data[:1] ]
[[183, 183, 184, 185, 185, 184, 183, 183, 186, 187, 190, 192, 195, 196, 197, 197, 193, 192, 191, 190, 188, 188, 188, 189, 186, 191, 191, 185, 183, 186, 188, 186, 189, 189, 188, 190, 194, 198, 201, 203, 207, 204, 198, 195, 197, 201, 199, 194, 199, 170, 151, 144, 126, 107, 105, 111, 119, 119, 123, 123, 111, 101, 111, 129, 135, 128, 143, 130, 111, 139, 134, 160, 139, 133, 127, 128, 141, 155, 155, 148, 142, 143, 155, 164, 151, 131, 134, 151, 156, 165, 156, 145, 166, 174, 157, 163, 163, 168, 168, 165, 169, 179, 183, 181, 184, 159, 148, 163, 185, 196, 206, 217, 214, 205, 193, 185, 179, 178, 187, 198, 203, 208, 206, 206, 215, 219, 212, 207, 199, 197, 198, 197, 202, 196, 186, 202, 193, 192, 191, 189, 188, 186, 182, 178, 181, 184, 186, 187, 187, 189, 190, 190, 182, 180, 177, 177, 179, 180, 180, 179, 177, 178, 178, 178, 178, 177]]
>>> [ el[0] for el in row for row in data[:1] ]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'row' is not defined
>>> [ el[0] [ for el in row ] for row in data[:1] ]
  File "<stdin>", line 1
    [ el[0] [ for el in row ] for row in data[:1] ]
                ^
SyntaxError: invalid syntax
>>> [ [ int(0.2126*p[0] + 0.7152*p[1] + 0.0722*p[2] for p in row] for row in data[:1] ]
  File "<stdin>", line 1
    [ [ int(0.2126*p[0] + 0.7152*p[1] + 0.0722*p[2] for p in row] for row in data[:1] ]
                                                                ^
SyntaxError: invalid syntax
>>> [ [ int(0.2126*p[0] + 0.7152*p[1] + 0.0722*p[2]) for p in row] for row in data[:1] ]
[[183, 183, 184, 184, 184, 184, 183, 183, 186, 187, 189, 192, 195, 195, 197, 197, 192, 192, 190, 189, 188, 188, 188, 189, 186, 190, 190, 184, 183, 186, 188, 186, 189, 189, 188, 189, 194, 198, 201, 203, 207, 203, 198, 195, 197, 201, 198, 194, 198, 170, 151, 144, 125, 106, 104, 111, 119, 119, 123, 123, 111, 100, 111, 129, 135, 128, 143, 130, 111, 139, 134, 159, 139, 133, 127, 128, 141, 155, 155, 148, 142, 143, 155, 164, 151, 131, 134, 151, 156, 165, 156, 145, 165, 174, 156, 163, 163, 168, 168, 165, 169, 178, 183, 181, 184, 159, 148, 163, 184, 195, 206, 217, 213, 204, 192, 184, 178, 177, 187, 198, 203, 207, 206, 206, 215, 219, 212, 207, 198, 197, 198, 197, 201, 195, 186, 201, 192, 192, 190, 189, 188, 186, 182, 177, 181, 184, 186, 187, 187, 189, 189, 189, 182, 180, 177, 177, 178, 180, 180, 178, 177, 177, 177, 177, 177, 177]]
>>> import numpy as np
import scipy.misc as smp
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named 'numpy'
>>> Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named 'scipy'
>>> import numpy as np
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named 'numpy'
>>> import numpy as np
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named 'numpy'
>>> import python.numpy as np
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named 'python'
>>> import numpy as np
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named 'numpy'
>>> import numpy as np
>>> import scipy.misc as smp
>>> data[:1]
[[(183, 183, 183), (183, 183, 183), (184, 184, 184), (185, 185, 185), (185, 185, 185), (184, 184, 184), (183, 183, 183), (183, 183, 183), (186, 186, 186), (187, 187, 187), (190, 190, 190), (192, 192, 192), (195, 195, 195), (196, 196, 196), (197, 197, 197), (197, 197, 197), (193, 193, 193), (192, 192, 192), (191, 191, 191), (190, 190, 190), (188, 188, 188), (188, 188, 188), (188, 188, 188), (189, 189, 189), (186, 186, 186), (191, 191, 191), (191, 191, 191), (185, 185, 185), (183, 183, 183), (186, 186, 186), (188, 188, 188), (186, 186, 186), (189, 189, 189), (189, 189, 189), (188, 188, 188), (190, 190, 190), (194, 194, 194), (198, 198, 198), (201, 201, 201), (203, 203, 203), (207, 207, 207), (204, 204, 204), (198, 198, 198), (195, 195, 195), (197, 197, 197), (201, 201, 201), (199, 199, 199), (194, 194, 194), (199, 199, 199), (170, 170, 170), (151, 151, 151), (144, 144, 144), (126, 126, 126), (107, 107, 107), (105, 105, 105), (111, 111, 111), (119, 119, 119), (119, 119, 119), (123, 123, 123), (123, 123, 123), (111, 111, 111), (101, 101, 101), (111, 111, 111), (129, 129, 129), (135, 135, 135), (128, 128, 128), (143, 143, 143), (130, 130, 130), (111, 111, 111), (139, 139, 139), (134, 134, 134), (160, 160, 160), (139, 139, 139), (133, 133, 133), (127, 127, 127), (128, 128, 128), (141, 141, 141), (155, 155, 155), (155, 155, 155), (148, 148, 148), (142, 142, 142), (143, 143, 143), (155, 155, 155), (164, 164, 164), (151, 151, 151), (131, 131, 131), (134, 134, 134), (151, 151, 151), (156, 156, 156), (165, 165, 165), (156, 156, 156), (145, 145, 145), (166, 166, 166), (174, 174, 174), (157, 157, 157), (163, 163, 163), (163, 163, 163), (168, 168, 168), (168, 168, 168), (165, 165, 165), (169, 169, 169), (179, 179, 179), (183, 183, 183), (181, 181, 181), (184, 184, 184), (159, 159, 159), (148, 148, 148), (163, 163, 163), (185, 185, 185), (196, 196, 196), (206, 206, 206), (217, 217, 217), (214, 214, 214), (205, 205, 205), (193, 193, 193), (185, 185, 185), (179, 179, 179), (178, 178, 178), (187, 187, 187), (198, 198, 198), (203, 203, 203), (208, 208, 208), (206, 206, 206), (206, 206, 206), (215, 215, 215), (219, 219, 219), (212, 212, 212), (207, 207, 207), (199, 199, 199), (197, 197, 197), (198, 198, 198), (197, 197, 197), (202, 202, 202), (196, 196, 196), (186, 186, 186), (202, 202, 202), (193, 193, 193), (192, 192, 192), (191, 191, 191), (189, 189, 189), (188, 188, 188), (186, 186, 186), (182, 182, 182), (178, 178, 178), (181, 181, 181), (184, 184, 184), (186, 186, 186), (187, 187, 187), (187, 187, 187), (189, 189, 189), (190, 190, 190), (190, 190, 190), (182, 182, 182), (180, 180, 180), (177, 177, 177), (177, 177, 177), (179, 179, 179), (180, 180, 180), (180, 180, 180), (179, 179, 179), (177, 177, 177), (178, 178, 178), (178, 178, 178), (178, 178, 178), (178, 178, 178), (177, 177, 177)]]
>>> img = smp.toimage( data[:1] )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'scipy.misc' has no attribute 'toimage'
>>> img = smp.toimage()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'scipy.misc' has no attribute 'toimage'
>>> img = smp.toimage( data[:1] )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'scipy.misc' has no attribute 'toimage'
>>> img = smp.toimage( data[:1] )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'scipy.misc' has no attribute 'toimage'
>>> import numpy as np
>>> import scipy.misc as smp
>>> img = smp.toimage( data[:1] )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'scipy.misc' has no attribute 'toimage'
>>>  scipy.misc.imread
  File "<stdin>", line 1
    scipy.misc.imread
    ^
IndentationError: unexpected indent
>>> scipy.misc.imread
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'scipy' is not defined
>>> import scipy
>>> scipy.misc.imread
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'scipy.misc' has no attribute 'imread'
>>> exit
Use exit() or Ctrl-D (i.e. EOF) to exit
>>> quit
Use quit() or Ctrl-D (i.e. EOF) to exit
>>> exit
Use exit() or Ctrl-D (i.e. EOF) to exit
>>> exit()

Process Python finished
Python 3.5.2+ (default, Aug 30 2016, 19:08:42)
[GCC 6.2.0 20160822] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> >>> >>> >>> scipy.misc.imread
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'scipy' is not defined
>>> scipy.misc.imread
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'scipy' is not defined
>>> import scipy
>>> scipy.misc.imread
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'scipy' has no attribute 'misc'
>>> import scipy.misc
>>> scipy.misc.imread
<function imread at 0x7fa56a429048>
>>> data = file2image("img01.png")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'file2image' is not defined
>>> exit
Use exit() or Ctrl-D (i.e. EOF) to exit
>>> exit()

Process Python finished
